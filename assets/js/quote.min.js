const SecurityUtils ={createTextElement:(tagName,className,textContent) => { const element = document.createElement(tagName); if(className) element.className = className; if(textContent) element.textContent = textContent; return element},createElement:(tagName,className,attributes ={}) => { const element = document.createElement(tagName); if(className) element.className = className;Object.entries(attributes).forEach(([key,value]) => {element.setAttribute(key,value)}); return element},appendChildren:(parent,...children) => {children.forEach(child => { if(child) parent.appendChild(child)}); return parent},sanitizeInput:(input) => { if(typeof input !== 'string') return ''; return input.replace(/[<>\"'&]/g,'')}}; class VirtualRenderer{constructor(){this.renderQueue = [];this.isRendering = false;this.processingDelay = 16;this.totalRenders = 0;this.completedRenders = 0;this.progressElement = null;this.setupProgressIndicator()}setupProgressIndicator(){ if(!document.querySelector('.virtual-render-progress')){this.progressElement = document.createElement('div');this.progressElement.className = 'virtual-render-progress'; const progressText = document.createElement('div');progressText.className = 'progress-text'; const loaderIcon = document.createElement('i');loaderIcon.setAttribute('data-lucide','loader-2'); const span = document.createElement('span');span.textContent = 'Rendering...'; const progressBar = document.createElement('div');progressBar.className = 'progress-bar'; const progressFill = document.createElement('div');progressFill.className = 'progress-fill';progressText.appendChild(loaderIcon);progressText.appendChild(span);progressBar.appendChild(progressFill);this.progressElement.appendChild(progressText);this.progressElement.appendChild(progressBar);document.body.appendChild(this.progressElement)} else{this.progressElement = document.querySelector('.virtual-render-progress')}}showProgress(){ if(this.progressElement){this.progressElement.classList.add('show')}}hideProgress(){ if(this.progressElement){this.progressElement.classList.remove('show')}}updateProgress(){ if(this.progressElement && this.totalRenders > 0){ const percentage = (this.completedRenders / this.totalRenders) * 100; const progressFill = this.progressElement.querySelector('.progress-fill'); if(progressFill){progressFill.style.width = `${percentage}%`}}}queueRender(renderFunction,priority = 'normal'){this.renderQueue.push({fn:renderFunction,priority});this.totalRenders++;this.processQueue()} async processQueue(){ if(this.isRendering) return;this.isRendering = true;this.showProgress();this.renderQueue.sort((a,b) => { const priorities ={high:3,normal:2,low:1}; return priorities[b.priority] - priorities[a.priority]}); while(this.renderQueue.length > 0){const{fn}= this.renderQueue.shift();try{ await new Promise(resolve => {requestAnimationFrame(() => {fn();this.completedRenders++;this.updateProgress();resolve()})}); await new Promise(resolve => setTimeout(resolve,this.processingDelay))}catch (error){console.error('Error in virtual render:',error);this.completedRenders++;this.updateProgress()}}this.isRendering = false;this.hideProgress();setTimeout(() => {this.totalRenders = 0;this.completedRenders = 0},1000)}clearQueue(){this.renderQueue = [];this.totalRenders = 0;this.completedRenders = 0;this.hideProgress()}getQueueLength(){ return this.renderQueue.length}isProcessing(){ return this.isRendering}} class QuoteSystem{constructor(){console.log('QuoteSystem constructor called');this.virtualRenderer = new VirtualRenderer();this.selectedPackage = null;this.selectedAdditionalFeatures = new Set();this.selectedAddonServices = new Set();this.totalPrice = 0;this.countries = [{code:'+93',flag:'af',name:'Afghanistan'},{code:'+355',flag:'al',name:'Albania'},{code:'+213',flag:'dz',name:'Algeria'},{code:'+376',flag:'ad',name:'Andorra'},{code:'+244',flag:'ao',name:'Angola'},{code:'+1-268',flag:'ag',name:'Antigua and Barbuda'},{code:'+54',flag:'ar',name:'Argentina'},{code:'+374',flag:'am',name:'Armenia'},{code:'+61',flag:'au',name:'Australia'},{code:'+43',flag:'at',name:'Austria'},{code:'+994',flag:'az',name:'Azerbaijan'},{code:'+1-242',flag:'bs',name:'Bahamas'},{code:'+973',flag:'bh',name:'Bahrain'},{code:'+880',flag:'bd',name:'Bangladesh'},{code:'+1-246',flag:'bb',name:'Barbados'},{code:'+375',flag:'by',name:'Belarus'},{code:'+32',flag:'be',name:'Belgium'},{code:'+501',flag:'bz',name:'Belize'},{code:'+229',flag:'bj',name:'Benin'},{code:'+975',flag:'bt',name:'Bhutan'},{code:'+591',flag:'bo',name:'Bolivia'},{code:'+387',flag:'ba',name:'Bosnia and Herzegovina'},{code:'+267',flag:'bw',name:'Botswana'},{code:'+55',flag:'br',name:'Brazil'},{code:'+673',flag:'bn',name:'Brunei'},{code:'+359',flag:'bg',name:'Bulgaria'},{code:'+226',flag:'bf',name:'Burkina Faso'},{code:'+257',flag:'bi',name:'Burundi'},{code:'+855',flag:'kh',name:'Cambodia'},{code:'+237',flag:'cm',name:'Cameroon'},{code:'+1',flag:'ca',name:'Canada'},{code:'+238',flag:'cv',name:'Cape Verde'},{code:'+236',flag:'cf',name:'Central African Republic'},{code:'+235',flag:'td',name:'Chad'},{code:'+56',flag:'cl',name:'Chile'},{code:'+86',flag:'cn',name:'China'},{code:'+57',flag:'co',name:'Colombia'},{code:'+269',flag:'km',name:'Comoros'},{code:'+242',flag:'cg',name:'Republic of the Congo'},{code:'+243',flag:'cd',name:'Democratic Republic of the Congo'},{code:'+506',flag:'cr',name:'Costa Rica'},{code:'+385',flag:'hr',name:'Croatia'},{code:'+53',flag:'cu',name:'Cuba'},{code:'+357',flag:'cy',name:'Cyprus'},{code:'+420',flag:'cz',name:'Czech Republic'},{code:'+45',flag:'dk',name:'Denmark'},{code:'+253',flag:'dj',name:'Djibouti'},{code:'+1-809',flag:'do',name:'Dominican Republic'},{code:'+670',flag:'tl',name:'East Timor'},{code:'+593',flag:'ec',name:'Ecuador'},{code:'+20',flag:'eg',name:'Egypt'},{code:'+503',flag:'sv',name:'El Salvador'},{code:'+240',flag:'gq',name:'Equatorial Guinea'},{code:'+291',flag:'er',name:'Eritrea'},{code:'+372',flag:'ee',name:'Estonia'},{code:'+268',flag:'sz',name:'Eswatini'},{code:'+251',flag:'et',name:'Ethiopia'},{code:'+679',flag:'fj',name:'Fiji'},{code:'+358',flag:'fi',name:'Finland'},{code:'+33',flag:'fr',name:'France'},{code:'+241',flag:'ga',name:'Gabon'},{code:'+220',flag:'gm',name:'Gambia'},{code:'+995',flag:'ge',name:'Georgia'},{code:'+49',flag:'de',name:'Germany'},{code:'+233',flag:'gh',name:'Ghana'},{code:'+30',flag:'gr',name:'Greece'},{code:'+1-473',flag:'gd',name:'Grenada'},{code:'+502',flag:'gt',name:'Guatemala'},{code:'+224',flag:'gn',name:'Guinea'},{code:'+245',flag:'gw',name:'Guinea-Bissau'},{code:'+592',flag:'gy',name:'Guyana'},{code:'+509',flag:'ht',name:'Haiti'},{code:'+504',flag:'hn',name:'Honduras'},{code:'+852',flag:'hk',name:'Hong Kong'},{code:'+36',flag:'hu',name:'Hungary'},{code:'+354',flag:'is',name:'Iceland'},{code:'+91',flag:'id',name:'India'},{code:'+62',flag:'id',name:'Indonesia'},{code:'+98',flag:'ir',name:'Iran'},{code:'+964',flag:'iq',name:'Iraq'},{code:'+353',flag:'ie',name:'Ireland'},{code:'+972',flag:'il',name:'Israel'},{code:'+39',flag:'it',name:'Italy'},{code:'+1-876',flag:'jm',name:'Jamaica'},{code:'+81',flag:'jp',name:'Japan'},{code:'+962',flag:'jo',name:'Jordan'},{code:'+7',flag:'kz',name:'Kazakhstan'},{code:'+254',flag:'ke',name:'Kenya'},{code:'+686',flag:'ki',name:'Kiribati'},{code:'+850',flag:'kp',name:'North Korea'},{code:'+82',flag:'kr',name:'South Korea'},{code:'+965',flag:'kw',name:'Kuwait'},{code:'+996',flag:'kg',name:'Kyrgyzstan'},{code:'+856',flag:'la',name:'Laos'},{code:'+371',flag:'lv',name:'Latvia'},{code:'+961',flag:'lb',name:'Lebanon'},{code:'+266',flag:'ls',name:'Lesotho'},{code:'+231',flag:'lr',name:'Liberia'},{code:'+218',flag:'ly',name:'Libya'},{code:'+423',flag:'li',name:'Liechtenstein'},{code:'+370',flag:'lt',name:'Lithuania'},{code:'+352',flag:'lu',name:'Luxembourg'},{code:'+853',flag:'mo',name:'Macau'},{code:'+261',flag:'mg',name:'Madagascar'},{code:'+265',flag:'mw',name:'Malawi'},{code:'+60',flag:'my',name:'Malaysia'},{code:'+960',flag:'mv',name:'Maldives'},{code:'+223',flag:'ml',name:'Mali'},{code:'+356',flag:'mt',name:'Malta'},{code:'+692',flag:'mh',name:'Marshall Islands'},{code:'+222',flag:'mr',name:'Mauritania'},{code:'+230',flag:'mu',name:'Mauritius'},{code:'+52',flag:'mx',name:'Mexico'},{code:'+691',flag:'fm',name:'Micronesia'},{code:'+373',flag:'md',name:'Moldova'},{code:'+377',flag:'mc',name:'Monaco'},{code:'+976',flag:'mn',name:'Mongolia'},{code:'+382',flag:'me',name:'Montenegro'},{code:'+212',flag:'ma',name:'Morocco'},{code:'+258',flag:'mz',name:'Mozambique'},{code:'+95',flag:'mm',name:'Myanmar'},{code:'+264',flag:'na',name:'Namibia'},{code:'+674',flag:'nr',name:'Nauru'},{code:'+977',flag:'np',name:'Nepal'},{code:'+31',flag:'nl',name:'Netherlands'},{code:'+64',flag:'nz',name:'New Zealand'},{code:'+505',flag:'ni',name:'Nicaragua'},{code:'+227',flag:'ne',name:'Niger'},{code:'+234',flag:'ng',name:'Nigeria'},{code:'+47',flag:'no',name:'Norway'},{code:'+968',flag:'om',name:'Oman'},{code:'+92',flag:'pk',name:'Pakistan'},{code:'+680',flag:'pw',name:'Palau'},{code:'+970',flag:'ps',name:'Palestine'},{code:'+507',flag:'pa',name:'Panama'},{code:'+675',flag:'pg',name:'Papua New Guinea'},{code:'+595',flag:'py',name:'Paraguay'},{code:'+51',flag:'pe',name:'Peru'},{code:'+63',flag:'ph',name:'Philippines'},{code:'+48',flag:'pl',name:'Poland'},{code:'+351',flag:'pt',name:'Portugal'},{code:'+974',flag:'qa',name:'Qatar'},{code:'+40',flag:'ro',name:'Romania'},{code:'+7',flag:'ru',name:'Russia'},{code:'+250',flag:'rw',name:'Rwanda'},{code:'+966',flag:'sa',name:'Saudi Arabia'},{code:'+221',flag:'sn',name:'Senegal'},{code:'+381',flag:'rs',name:'Serbia'},{code:'+248',flag:'sc',name:'Seychelles'},{code:'+232',flag:'sl',name:'Sierra Leone'},{code:'+65',flag:'sg',name:'Singapore'},{code:'+421',flag:'sk',name:'Slovakia'},{code:'+386',flag:'si',name:'Slovenia'},{code:'+677',flag:'sb',name:'Solomon Islands'},{code:'+252',flag:'so',name:'Somalia'},{code:'+27',flag:'za',name:'South Africa'},{code:'+34',flag:'es',name:'Spain'},{code:'+94',flag:'lk',name:'Sri Lanka'},{code:'+249',flag:'sd',name:'Sudan'},{code:'+597',flag:'sr',name:'Suriname'},{code:'+46',flag:'se',name:'Sweden'},{code:'+41',flag:'ch',name:'Switzerland'},{code:'+963',flag:'sy',name:'Syria'},{code:'+886',flag:'tw',name:'Taiwan'},{code:'+992',flag:'tj',name:'Tajikistan'},{code:'+255',flag:'tz',name:'Tanzania'},{code:'+66',flag:'th',name:'Thailand'},{code:'+228',flag:'tg',name:'Togo'},{code:'+676',flag:'to',name:'Tonga'},{code:'+1-868',flag:'tt',name:'Trinidad and Tobago'},{code:'+216',flag:'tn',name:'Tunisia'},{code:'+90',flag:'tr',name:'Turkey'},{code:'+993',flag:'tm',name:'Turkmenistan'},{code:'+256',flag:'ug',name:'Uganda'},{code:'+380',flag:'ua',name:'Ukraine'},{code:'+971',flag:'ae',name:'United Arab Emirates'},{code:'+44',flag:'gb',name:'United Kingdom'},{code:'+1',flag:'us',name:'United States'},{code:'+598',flag:'uy',name:'Uruguay'},{code:'+998',flag:'uz',name:'Uzbekistan'},{code:'+678',flag:'vu',name:'Vanuatu'},{code:'+58',flag:'ve',name:'Venezuela'},{code:'+84',flag:'vn',name:'Vietnam'},{code:'+967',flag:'ye',name:'Yemen'},{code:'+260',flag:'zm',name:'Zambia'},{code:'+263',flag:'zw',name:'Zimbabwe'}];console.log('Calling init()...');this.init()}saveToLocalStorage(){ const data ={selectedPackage:this.selectedPackage,selectedAdditionalFeatures:Array.from(this.selectedAdditionalFeatures),selectedAddonServices:Array.from(this.selectedAddonServices),totalPrice:this.totalPrice,timestamp:Date.now()};localStorage.setItem('hvacQuoteData',JSON.stringify(data))}loadFromLocalStorage(){try{ const savedData = localStorage.getItem('hvacQuoteData'); if(savedData){ const data = JSON.parse(savedData); const isDataFresh = (Date.now() - data.timestamp) < (24 * 60 * 60 * 1000); if(isDataFresh){this.selectedPackage = data.selectedPackage;this.selectedAdditionalFeatures = new Set(data.selectedAdditionalFeatures || []);this.selectedAddonServices = new Set(data.selectedAddonServices || []);this.totalPrice = data.totalPrice || 0;console.log('Loaded saved data from localStorage'); return true} else{localStorage.removeItem('hvacQuoteData')}}}catch (error){console.error('Error loading from localStorage:',error);localStorage.removeItem('hvacQuoteData')} return false}clearLocalStorage(){localStorage.removeItem('hvacQuoteData')}showNotification(message,type = 'info'){ const notification = document.createElement('div');notification.className = `notification notification-${type}`; const notificationContent = document.createElement('div');notificationContent.className = 'notification-content'; const icon = document.createElement('i'); const iconType = type === 'success' ? 'check-circle':type === 'error' ? 'alert-circle':'info';icon.setAttribute('data-lucide',iconType); const notificationText = document.createElement('div');notificationText.className = 'notification-text'; const formattedMessage = message.replace(/\n/g,' ');notificationText.textContent = formattedMessage;notificationContent.appendChild(icon);notificationContent.appendChild(notificationText);notification.appendChild(notificationContent);document.body.appendChild(notification);setTimeout(() => notification.classList.add('show'),100); const duration = type === 'error' ? 5000:3000;setTimeout(() => {notification.classList.remove('show');setTimeout(() => notification.remove(),300)},duration);lucide.createIcons()}showLoadingState(){ const loadingOverlay = document.createElement('div');loadingOverlay.className = 'loading-overlay'; const loadingSpinner = document.createElement('div');loadingSpinner.className = 'loading-spinner'; const icon = document.createElement('i');icon.setAttribute('data-lucide','loader-2'); const paragraph = document.createElement('p');paragraph.textContent = 'Loading quote system...';loadingSpinner.appendChild(icon);loadingSpinner.appendChild(paragraph);loadingOverlay.appendChild(loadingSpinner);document.body.appendChild(loadingOverlay);lucide.createIcons()}hideLoadingState(){ const loadingOverlay = document.querySelector('.loading-overlay'); if(loadingOverlay){loadingOverlay.remove()}}showSkeletonLoading(containerId,type = 'card'){ const container = document.getElementById(containerId); if(!container) return; const skeletonTemplates ={card:` <div class="skeleton-card"> <div class="skeleton-header"></div> <div class="skeleton-content"> <div class="skeleton-line"></div> <div class="skeleton-line"></div> <div class="skeleton-line short"></div> </div> </div> `,grid:` <div class="skeleton-grid"> ${Array(6).fill('<div class="skeleton-card"></div>').join('')}</div> `,feature:` <div class="skeleton-card"> <div class="skeleton-header"></div> <div class="skeleton-content"> <div class="skeleton-line"></div> <div class="skeleton-line medium"></div> <div class="skeleton-line short"></div> </div> </div> `}; const skeleton = skeletonTemplates[type] || skeletonTemplates.card;container.innerHTML = skeleton}clearSkeletonLoading(containerId){ const container = document.getElementById(containerId); if(container){ const skeletonElements = container.querySelectorAll('.skeleton-card,.skeleton-grid');skeletonElements.forEach(element => element.remove())}}createFallbackData(){this.packages = [{id:'hvac-appliance-website',name:'HVAC & Appliance Repair Website',price:1200,originalPrice:1800,timeline:'18-24 days',description:'Complete professional website solution for HVAC and appliance repair businesses',includedComponents:[ 'Professional HVAC & Appliance Homepage','Comprehensive Service Pages','Emergency Service Management','Online Booking & Scheduling','Customer Reviews & Testimonials','Service Area Management','Advanced Local SEO','Social Media Integration','Analytics & Performance Tracking','Priority Support','Advanced HVAC Brand Support','Advanced Appliance Brand Support','Maintenance Programs','Installation Services','Commercial HVAC Support','Commercial Appliance Support','Mobile-Optimized Design','Contact Form & Phone Integration','Service Request System','Business Hours & Location','Service Request Forms' ],popular:true}];this.features ={core:[],content:[],marketing:[],social:[],advanced:[],hvac:[],appliance:[]};this.addons = [];this.components ={pages:[],features:[],technical:[]};this.emergencyServices = [];this.serviceAreas = [];this.hvacFeatures = [];this.applianceFeatures = [];this.contactFeatures = [];this.virtualRenderer.queueRender(() => this.renderPackages(),'high');this.virtualRenderer.queueRender(() => this.renderAdditionalFeatures(),'normal');this.virtualRenderer.queueRender(() => this.renderAddonServices(),'normal')} async init(){ const hasSavedData = this.loadFromLocalStorage(); await this.loadData();this.setupEventListeners(); if(!this.selectedPackage && this.packages && this.packages.length > 0){this.selectedPackage = this.packages[0].id;this.saveToLocalStorage()} if(!hasSavedData){this.saveToLocalStorage()} if(hasSavedData){this.restoreUIState();this.showNotification('Your previous selections have been restored','info')}this.virtualRenderer.queueRender(() => this.renderAdditionalFeatures(),'normal');this.virtualRenderer.queueRender(() => this.renderAddonServices(),'normal');this.updateSummary();setTimeout(() => {this.updateSummary(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = this.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}},200);setTimeout(() => {this.updateSummary(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = this.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}},500);setTimeout(() => {this.updateSummary();this.updateGenerateButton()},1000);setInterval(() => { const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = this.calculateTotalPrice(); const displayedPrice = summaryTotalElement.textContent.replace(/[$,]/g,''); const expectedPrice = currentPrice.toString(); if(displayedPrice !== expectedPrice){console.log('Price mismatch detected,updating...');summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`;this.saveToLocalStorage()}}},2000); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement && window.MutationObserver){ const observer = new MutationObserver((mutations) => {mutations.forEach((mutation) => { if(mutation.type === 'childList' || mutation.type === 'characterData'){ const currentPrice = this.calculateTotalPrice(); const displayedPrice = summaryTotalElement.textContent.replace(/[$,]/g,''); const expectedPrice = currentPrice.toString(); if(displayedPrice !== expectedPrice){console.log('Mutation observer detected price change,correcting...');summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`;this.saveToLocalStorage()}}})});observer.observe(summaryTotalElement,{childList:true,characterData:true,subtree:true})}}restoreUIState(){ if(this.selectedPackage){ const packageCard = document.querySelector(`[data-package-id="${this.selectedPackage}"]`); if(packageCard){packageCard.classList.add('selected')}} if(this.selectedAdditionalFeatures && this.selectedAdditionalFeatures.size > 0){this.selectedAdditionalFeatures.forEach(featureId => { const featureCard = document.querySelector(`[data-feature-id="${featureId}"]`); if(featureCard){featureCard.classList.add('selected')}})} if(this.selectedAddonServices && this.selectedAddonServices.size > 0){this.selectedAddonServices.forEach(serviceId => { const serviceCard = document.querySelector(`[data-service-id="${serviceId}"]`); if(serviceCard){serviceCard.classList.add('selected')}})}this.updateSummary();this.updateGenerateButton()} async loadData(){try{console.log('Loading quote data...');this.showLoadingState(); const [packages,additionalFeatures,addonServices] = await Promise.all([ fetch('/api/quote/packages').then(res => { if(!res.ok) throw new Error(`Failed to load packages:${res.status}`); return res.json()}),fetch('/api/quote/additional-features').then(res => { if(!res.ok) throw new Error(`Failed to load additional features:${res.status}`); return res.json()}),fetch('/api/quote/addon-services').then(res => { if(!res.ok) throw new Error(`Failed to load addon services:${res.status}`); return res.json()}) ]);console.log('Packages loaded:',packages);console.log('Packages length:',packages.length);console.log('First package:',packages[0]);console.log('All package IDs:',packages.map(p => p.id));console.log('Additional features loaded:',additionalFeatures);console.log('Addon services loaded:',addonServices);console.log('Additional features length:',additionalFeatures ? additionalFeatures.length:'undefined');console.log('Addon services length:',addonServices ? addonServices.length:'undefined');this.packages = packages;this.additionalFeatures = additionalFeatures;this.addonServices = addonServices;console.log('Rendering packages...');this.virtualRenderer.queueRender(() => this.renderPackages(),'high');this.virtualRenderer.queueRender(() => this.renderAdditionalFeatures(),'normal');this.virtualRenderer.queueRender(() => this.renderAddonServices(),'normal');this.hideLoadingState();this.showNotification('Quote system loaded successfully!','success')}catch (error){console.error('Error loading quote data:',error);this.hideLoadingState();this.showNotification(`Failed to load data:${error.message}`,'error');console.log('Creating fallback packages...');this.createFallbackData()}}setupEventListeners(){document.addEventListener('click',(e) => { if(e.target.closest('.emergency-card')){ const card = e.target.closest('.emergency-card');this.selectEmergencyService(card)}});document.addEventListener('click',(e) => { if(e.target.closest('.area-card')){ const card = e.target.closest('.area-card');this.selectServiceArea(card)}});document.addEventListener('click',(e) => { if(e.target.closest('#hvacFeaturesGrid .feature-card')){ const card = e.target.closest('.feature-card');this.toggleHvacFeature(card)}});document.addEventListener('click',(e) => { if(e.target.closest('#applianceFeaturesGrid .feature-card')){ const card = e.target.closest('.feature-card');this.toggleApplianceFeature(card)}});document.addEventListener('click',(e) => { if(e.target.closest('#featureGrid .feature-card')){ const card = e.target.closest('.feature-card'); const isIncluded = card.classList.contains('included-in-package'); if(!isIncluded){this.toggleFeature(card.dataset.featureId,card)}}});document.addEventListener('click',(e) => { if(e.target.closest('.addon-card')){ const card = e.target.closest('.addon-card');this.toggleAddon(card.dataset.addonId,card)}}); const serviceAreaSelect = document.getElementById('customerServiceArea'); if(serviceAreaSelect){serviceAreaSelect.addEventListener('change',(e) => {this.selectedServiceArea = e.target.value;this.updateSummary()})} const formFields = ['customerName','customerEmail','customerPhone','customerCompany','customerLocation','customerMessage'];formFields.forEach(fieldId => { const field = document.getElementById(fieldId); if(field){field.addEventListener('input',() => {this.updateGenerateButton()});field.addEventListener('blur',() => {this.updateGenerateButton()})}});this.initializeCountrySelector()}initializeCountrySelector(){ const trigger = document.getElementById('countrySelectTrigger'); const dropdown = document.getElementById('countrySelectDropdown'); const searchInput = document.getElementById('countrySearch'); const countryList = document.getElementById('countryList'); const selectedFlag = document.getElementById('selectedFlag'); const selectedCountryCode = document.getElementById('selectedCountryCode'); const chevronIcon = document.getElementById('chevronIcon'); const hiddenSelect = document.getElementById('countryCode'); const countries = [{code:'+93',flag:'af',name:'Afghanistan'},{code:'+355',flag:'al',name:'Albania'},{code:'+213',flag:'dz',name:'Algeria'},{code:'+376',flag:'ad',name:'Andorra'},{code:'+244',flag:'ao',name:'Angola'},{code:'+1-268',flag:'ag',name:'Antigua and Barbuda'},{code:'+54',flag:'ar',name:'Argentina'},{code:'+374',flag:'am',name:'Armenia'},{code:'+61',flag:'au',name:'Australia'},{code:'+43',flag:'at',name:'Austria'},{code:'+994',flag:'az',name:'Azerbaijan'},{code:'+1-242',flag:'bs',name:'Bahamas'},{code:'+973',flag:'bh',name:'Bahrain'},{code:'+880',flag:'bd',name:'Bangladesh'},{code:'+1-246',flag:'bb',name:'Barbados'},{code:'+375',flag:'by',name:'Belarus'},{code:'+32',flag:'be',name:'Belgium'},{code:'+501',flag:'bz',name:'Belize'},{code:'+229',flag:'bj',name:'Benin'},{code:'+975',flag:'bt',name:'Bhutan'},{code:'+591',flag:'bo',name:'Bolivia'},{code:'+387',flag:'ba',name:'Bosnia and Herzegovina'},{code:'+267',flag:'bw',name:'Botswana'},{code:'+55',flag:'br',name:'Brazil'},{code:'+673',flag:'bn',name:'Brunei'},{code:'+359',flag:'bg',name:'Bulgaria'},{code:'+226',flag:'bf',name:'Burkina Faso'},{code:'+257',flag:'bi',name:'Burundi'},{code:'+855',flag:'kh',name:'Cambodia'},{code:'+237',flag:'cm',name:'Cameroon'},{code:'+1',flag:'ca',name:'Canada'},{code:'+238',flag:'cv',name:'Cape Verde'},{code:'+236',flag:'cf',name:'Central African Republic'},{code:'+235',flag:'td',name:'Chad'},{code:'+56',flag:'cl',name:'Chile'},{code:'+86',flag:'cn',name:'China'},{code:'+57',flag:'co',name:'Colombia'},{code:'+269',flag:'km',name:'Comoros'},{code:'+242',flag:'cg',name:'Republic of the Congo'},{code:'+243',flag:'cd',name:'Democratic Republic of the Congo'},{code:'+506',flag:'cr',name:'Costa Rica'},{code:'+385',flag:'hr',name:'Croatia'},{code:'+53',flag:'cu',name:'Cuba'},{code:'+357',flag:'cy',name:'Cyprus'},{code:'+420',flag:'cz',name:'Czech Republic'},{code:'+45',flag:'dk',name:'Denmark'},{code:'+253',flag:'dj',name:'Djibouti'},{code:'+1-809',flag:'do',name:'Dominican Republic'},{code:'+670',flag:'tl',name:'East Timor'},{code:'+593',flag:'ec',name:'Ecuador'},{code:'+20',flag:'eg',name:'Egypt'},{code:'+503',flag:'sv',name:'El Salvador'},{code:'+240',flag:'gq',name:'Equatorial Guinea'},{code:'+291',flag:'er',name:'Eritrea'},{code:'+372',flag:'ee',name:'Estonia'},{code:'+268',flag:'sz',name:'Eswatini'},{code:'+251',flag:'et',name:'Ethiopia'},{code:'+679',flag:'fj',name:'Fiji'},{code:'+358',flag:'fi',name:'Finland'},{code:'+33',flag:'fr',name:'France'},{code:'+241',flag:'ga',name:'Gabon'},{code:'+220',flag:'gm',name:'Gambia'},{code:'+995',flag:'ge',name:'Georgia'},{code:'+49',flag:'de',name:'Germany'},{code:'+233',flag:'gh',name:'Ghana'},{code:'+30',flag:'gr',name:'Greece'},{code:'+1-473',flag:'gd',name:'Grenada'},{code:'+502',flag:'gt',name:'Guatemala'},{code:'+224',flag:'gn',name:'Guinea'},{code:'+245',flag:'gw',name:'Guinea-Bissau'},{code:'+592',flag:'gy',name:'Guyana'},{code:'+509',flag:'ht',name:'Haiti'},{code:'+504',flag:'hn',name:'Honduras'},{code:'+852',flag:'hk',name:'Hong Kong'},{code:'+36',flag:'hu',name:'Hungary'},{code:'+354',flag:'is',name:'Iceland'},{code:'+91',flag:'in',name:'India'},{code:'+62',flag:'id',name:'Indonesia'},{code:'+98',flag:'ir',name:'Iran'},{code:'+964',flag:'iq',name:'Iraq'},{code:'+353',flag:'ie',name:'Ireland'},{code:'+972',flag:'il',name:'Israel'},{code:'+39',flag:'it',name:'Italy'},{code:'+1-876',flag:'jm',name:'Jamaica'},{code:'+81',flag:'jp',name:'Japan'},{code:'+962',flag:'jo',name:'Jordan'},{code:'+7',flag:'kz',name:'Kazakhstan'},{code:'+254',flag:'ke',name:'Kenya'},{code:'+686',flag:'ki',name:'Kiribati'},{code:'+850',flag:'kp',name:'North Korea'},{code:'+82',flag:'kr',name:'South Korea'},{code:'+965',flag:'kw',name:'Kuwait'},{code:'+996',flag:'kg',name:'Kyrgyzstan'},{code:'+856',flag:'la',name:'Laos'},{code:'+371',flag:'lv',name:'Latvia'},{code:'+961',flag:'lb',name:'Lebanon'},{code:'+266',flag:'ls',name:'Lesotho'},{code:'+231',flag:'lr',name:'Liberia'},{code:'+218',flag:'ly',name:'Libya'},{code:'+423',flag:'li',name:'Liechtenstein'},{code:'+370',flag:'lt',name:'Lithuania'},{code:'+352',flag:'lu',name:'Luxembourg'},{code:'+853',flag:'mo',name:'Macau'},{code:'+261',flag:'mg',name:'Madagascar'},{code:'+265',flag:'mw',name:'Malawi'},{code:'+60',flag:'my',name:'Malaysia'},{code:'+960',flag:'mv',name:'Maldives'},{code:'+223',flag:'ml',name:'Mali'},{code:'+356',flag:'mt',name:'Malta'},{code:'+692',flag:'mh',name:'Marshall Islands'},{code:'+222',flag:'mr',name:'Mauritania'},{code:'+230',flag:'mu',name:'Mauritius'},{code:'+52',flag:'mx',name:'Mexico'},{code:'+691',flag:'fm',name:'Micronesia'},{code:'+373',flag:'md',name:'Moldova'},{code:'+377',flag:'mc',name:'Monaco'},{code:'+976',flag:'mn',name:'Mongolia'},{code:'+382',flag:'me',name:'Montenegro'},{code:'+212',flag:'ma',name:'Morocco'},{code:'+258',flag:'mz',name:'Mozambique'},{code:'+95',flag:'mm',name:'Myanmar'},{code:'+264',flag:'na',name:'Namibia'},{code:'+674',flag:'nr',name:'Nauru'},{code:'+977',flag:'np',name:'Nepal'},{code:'+31',flag:'nl',name:'Netherlands'},{code:'+64',flag:'nz',name:'New Zealand'},{code:'+505',flag:'ni',name:'Nicaragua'},{code:'+227',flag:'ne',name:'Niger'},{code:'+234',flag:'ng',name:'Nigeria'},{code:'+47',flag:'no',name:'Norway'},{code:'+968',flag:'om',name:'Oman'},{code:'+92',flag:'pk',name:'Pakistan'},{code:'+680',flag:'pw',name:'Palau'},{code:'+970',flag:'ps',name:'Palestine'},{code:'+507',flag:'pa',name:'Panama'},{code:'+675',flag:'pg',name:'Papua New Guinea'},{code:'+595',flag:'py',name:'Paraguay'},{code:'+51',flag:'pe',name:'Peru'},{code:'+63',flag:'ph',name:'Philippines'},{code:'+48',flag:'pl',name:'Poland'},{code:'+351',flag:'pt',name:'Portugal'},{code:'+974',flag:'qa',name:'Qatar'},{code:'+40',flag:'ro',name:'Romania'},{code:'+7',flag:'ru',name:'Russia'},{code:'+250',flag:'rw',name:'Rwanda'},{code:'+966',flag:'sa',name:'Saudi Arabia'},{code:'+221',flag:'sn',name:'Senegal'},{code:'+381',flag:'rs',name:'Serbia'},{code:'+248',flag:'sc',name:'Seychelles'},{code:'+232',flag:'sl',name:'Sierra Leone'},{code:'+65',flag:'sg',name:'Singapore'},{code:'+421',flag:'sk',name:'Slovakia'},{code:'+386',flag:'si',name:'Slovenia'},{code:'+677',flag:'sb',name:'Solomon Islands'},{code:'+252',flag:'so',name:'Somalia'},{code:'+27',flag:'za',name:'South Africa'},{code:'+34',flag:'es',name:'Spain'},{code:'+94',flag:'lk',name:'Sri Lanka'},{code:'+249',flag:'sd',name:'Sudan'},{code:'+597',flag:'sr',name:'Suriname'},{code:'+46',flag:'se',name:'Sweden'},{code:'+41',flag:'ch',name:'Switzerland'},{code:'+963',flag:'sy',name:'Syria'},{code:'+886',flag:'tw',name:'Taiwan'},{code:'+992',flag:'tj',name:'Tajikistan'},{code:'+255',flag:'tz',name:'Tanzania'},{code:'+66',flag:'th',name:'Thailand'},{code:'+228',flag:'tg',name:'Togo'},{code:'+676',flag:'to',name:'Tonga'},{code:'+1-868',flag:'tt',name:'Trinidad and Tobago'},{code:'+216',flag:'tn',name:'Tunisia'},{code:'+90',flag:'tr',name:'Turkey'},{code:'+993',flag:'tm',name:'Turkmenistan'},{code:'+256',flag:'ug',name:'Uganda'},{code:'+380',flag:'ua',name:'Ukraine'},{code:'+971',flag:'ae',name:'United Arab Emirates'},{code:'+44',flag:'gb',name:'United Kingdom'},{code:'+1',flag:'us',name:'United States'},{code:'+598',flag:'uy',name:'Uruguay'},{code:'+998',flag:'uz',name:'Uzbekistan'},{code:'+678',flag:'vu',name:'Vanuatu'},{code:'+58',flag:'ve',name:'Venezuela'},{code:'+84',flag:'vn',name:'Vietnam'},{code:'+967',flag:'ye',name:'Yemen'},{code:'+260',flag:'zm',name:'Zambia'},{code:'+263',flag:'zw',name:'Zimbabwe'}]; function renderCountries(countriesToRender = window.quoteSystem.countries){countryList.innerHTML = countriesToRender.map(country => ` <div class="country-item" data-code="${country.code}" data-flag="${country.flag}"> <img src="https:<span class="country-code">${country.code}</span> </div> `).join('')}renderCountries();trigger.addEventListener('click',() => { const isOpen = !dropdown.hidden;dropdown.hidden = isOpen;trigger.classList.toggle('active',!isOpen); if(!isOpen){searchInput.focus()}});searchInput.addEventListener('input',(e) => { const searchTerm = e.target.value.toLowerCase(); const filteredCountries = window.quoteSystem.countries.filter(country => country.name.toLowerCase().includes(searchTerm) || country.code.includes(searchTerm) || country.flag.toLowerCase().includes(searchTerm) );renderCountries(filteredCountries)});countryList.addEventListener('click',(e) => { const countryItem = e.target.closest('.country-item'); if(!countryItem) return; const code = countryItem.dataset.code; const flag = countryItem.dataset.flag; const name = window.quoteSystem.countries.find(c => c.code === code)?.name || '';selectedFlag.src = `https:selectedFlag.alt = name;selectedCountryCode.textContent = code;hiddenSelect.value = code;hiddenSelect.dispatchEvent( new Event('change'));dropdown.hidden = true;trigger.classList.remove('active');searchInput.value = '';renderCountries()});document.addEventListener('click',(e) => { if(!trigger.contains(e.target) && !dropdown.contains(e.target)){dropdown.hidden = true;trigger.classList.remove('active')}});searchInput.addEventListener('keydown',(e) => { if(e.key === 'Escape'){dropdown.hidden = true;trigger.classList.remove('active')}})}renderPackages(){console.log('renderPackages called'); const packageFeaturesGrid = document.getElementById('packageFeaturesGrid');console.log('packageFeaturesGrid element:',packageFeaturesGrid); if(!packageFeaturesGrid){console.error('packageFeaturesGrid element not found');return}console.log('this.packages:',this.packages);console.log('this.packages.length:',this.packages ? this.packages.length:'undefined'); if(!this.packages || this.packages.length === 0){console.error('No packages data available');return} const pkg = this.packages[0]; const includedComponents = pkg.includedFeatures || pkg.includedComponents || pkg.features || []; const featuresHTML = includedComponents.map(component => ` <div class="component-item"> <i data-lucide="check"></i> <span>${component}</span> </div> `).join('');console.log('Generated features HTML:',featuresHTML);packageFeaturesGrid.innerHTML = featuresHTML;this.selectedPackage = pkg.id;this.saveToLocalStorage();lucide.createIcons();console.log('Package features rendered and auto-selected successfully')}renderEmergencyServices(){ const emergencyGrid = document.getElementById('emergencyGrid'); if(!emergencyGrid){console.log('Emergency grid not found');return}console.log('Rendering emergency services. Available services:',this.emergencyServices);console.log('Selected emergency service:',this.selectedEmergency);console.log('Selected package:',this.selectedPackage);console.log('Available packages:',this.packages);emergencyGrid.innerHTML = this.emergencyServices.map(service => { const isIncluded = this.isComponentIncluded(service.name); const isSelected = this.selectedEmergency === service.id;console.log(`Emergency service ${service.name}:isIncluded = ${isIncluded},isSelected = ${isSelected}`); return ` <div class="emergency-card ${service.popular ? 'featured':''}${isIncluded ? 'included-in-package':''}${isSelected ? 'selected':''}" data-emergency-id="${service.id}"> <div class="emergency-header"> <i data-lucide="clock"></i> <h3>${service.name}</h3> ${service.popular ? '<span class="badge">Most Popular</span>':''}</div> <div class="emergency-details"> <p>${service.responseTime}response time</p> ${service.features.map(feature => `<p>${feature}</p>`).join('')}</div> <div class="emergency-price">${isIncluded ? 'Included':`$${service.price}`}</div> ${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> `}).join(''); const emergencyCards = emergencyGrid.querySelectorAll('.emergency-card');console.log(`Found ${emergencyCards.length}emergency cards`);emergencyCards.forEach(card => { const emergencyId = card.dataset.emergencyId;card.addEventListener('click',(e) => {console.log(`Emergency card clicked:${emergencyId}`);e.preventDefault();e.stopPropagation(); const service = this.emergencyServices.find(s => s.id === emergencyId); if(service && this.isComponentIncluded(service.name)){this.showNotification('This emergency service is already included in your package!','info');return}card.style.transform = 'scale(0.98)';setTimeout(() => {card.style.transform = ''},150);this.selectEmergencyService(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {console.log(`Emergency card child clicked:${emergencyId}`);e.preventDefault();e.stopPropagation(); const service = this.emergencyServices.find(s => s.id === emergencyId); if(service && this.isComponentIncluded(service.name)){this.showNotification('This emergency service is already included in your package!','info');return}this.selectEmergencyService(card)})})});lucide.createIcons()}renderServiceAreas(){ const serviceAreaGrid = document.getElementById('serviceAreaGrid'); if(!serviceAreaGrid) return; const selectedPackageComponents = this.selectedPackage ? this.packages.find(p => p.id === this.selectedPackage)?.includedComponents || []:[]; const hasServiceAreaManagement = selectedPackageComponents.some(pkgComponent => pkgComponent.toLowerCase().includes('service area') || pkgComponent.toLowerCase().includes('coverage map') );serviceAreaGrid.innerHTML = this.serviceAreas.map(area => { const isIncluded = this.isComponentIncluded(area.name); const isSelected = this.selectedServiceArea === area.id;console.log(`Service area ${area.name}:isIncluded = ${isIncluded},isSelected = ${isSelected}`); return ` <div class="area-card ${isIncluded ? 'included-in-package':''}${isSelected ? 'selected':''}" data-area-id="${area.id}"> <div class="area-header"> <h3>${area.name}</h3> <span class="area-radius">${area.radius}</span> </div> <div class="area-details"> <p>${area.responseTime}emergency response</p> ${area.features.map(feature => `<p>${feature}</p>`).join('')}</div> <div class="area-price">${isIncluded ? 'Included':`+$${area.price}`}</div> ${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> `}).join('');serviceAreaGrid.querySelectorAll('.area-card').forEach(card => { const areaId = card.dataset.areaId; if(areaId === 'extended-zone' || areaId === 'premium-zone'){card.style.cursor = 'pointer';card.classList.remove('included-in-package')}card.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const area = this.serviceAreas.find(a => a.id === areaId); if(area && this.isComponentIncluded(area.name)){this.showNotification('This service area is already included in your package!','info');return}this.selectServiceArea(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const area = this.serviceAreas.find(a => a.id === areaId); if(area && this.isComponentIncluded(area.name)){this.showNotification('This service area is already included in your package!','info');return}this.selectServiceArea(card)})})})}renderHvacFeatures(){ const hvacGrid = document.getElementById('hvacFeaturesGrid'); if(!hvacGrid){console.log('HVAC grid not found');return} const hvacFeatures = this.hvacFeatures || [];console.log('Rendering HVAC features. Available:',hvacFeatures);console.log('HVAC features length:',hvacFeatures.length);console.log('Selected HVAC features:',Array.from(this.selectedHvacFeatures));hvacGrid.innerHTML = hvacFeatures.map(feature => { const isSelected = this.selectedHvacFeatures.has(feature.id); const isIncluded = this.isComponentIncluded(feature.name); const displayPrice = isIncluded ? 0:feature.price; return ` <div class="feature-card hvac-feature-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-feature-id="${feature.id}"> <div class="feature-header"> <h4>${feature.name}</h4> <span class="feature-price">$${displayPrice}</span> </div> <p>${feature.description}</p> ${feature.brands ? ` <div class="feature-brands"> ${feature.brands.map(brand => `<span class="brand-tag">${brand}</span>`).join('')}</div> `:''}${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> `}).join('');hvacGrid.querySelectorAll('.hvac-feature-card').forEach(card => { const featureId = card.dataset.featureId;card.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const feature = this.hvacFeatures?.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleHvacFeature(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const feature = this.hvacFeatures?.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleHvacFeature(card)})})});lucide.createIcons()}renderApplianceFeatures(){ const applianceGrid = document.getElementById('applianceFeaturesGrid'); if(!applianceGrid){console.log('Appliance grid not found');return} const applianceFeatures = this.applianceFeatures || [];console.log('Rendering Appliance features. Available:',applianceFeatures);console.log('Appliance features length:',applianceFeatures.length);console.log('Selected Appliance features:',Array.from(this.selectedApplianceFeatures));applianceGrid.innerHTML = applianceFeatures.map(feature => { const isSelected = this.selectedApplianceFeatures.has(feature.id); const isIncluded = this.isComponentIncluded(feature.name); const displayPrice = isIncluded ? 0:feature.price; return ` <div class="feature-card appliance-feature-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-feature-id="${feature.id}"> <div class="feature-header"> <h4>${feature.name}</h4> <span class="feature-price">$${displayPrice}</span> </div> <p>${feature.description}</p> ${feature.brands ? ` <div class="feature-brands"> ${feature.brands.map(brand => `<span class="brand-tag">${brand}</span>`).join('')}</div> `:''}${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> `}).join('');applianceGrid.querySelectorAll('.appliance-feature-card').forEach(card => { const featureId = card.dataset.featureId;card.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const feature = this.applianceFeatures?.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleApplianceFeature(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation(); const feature = this.applianceFeatures?.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleApplianceFeature(card)})})});lucide.createIcons()}renderContactFeatures(){ const contactGrid = document.querySelector('.contact-features-grid'); if(!contactGrid){console.log('Contact features grid not found');return}console.log('Rendering contact features. Available features:',this.contactFeatures);console.log('Selected contact features:',Array.from(this.selectedContactFeatures)); if(!this.contactFeatures || this.contactFeatures.length === 0){console.log('No contact features data available');contactGrid.innerHTML = '<p>No contact features available</p>';return}contactGrid.innerHTML = this.contactFeatures.map(feature => { const isSelected = this.selectedContactFeatures.has(feature.id); const isIncluded = this.isComponentIncluded(feature.name); const displayPrice = isIncluded ? 0:feature.price;console.log(`Contact feature ${feature.id}:isSelected = ${isSelected},isIncluded = ${isIncluded}`); return ` <div class="contact-feature-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-feature-id="${feature.id}"> <div class="contact-feature-header"> <i data-lucide="phone"></i> <h4>${feature.name}</h4> </div> <p>${feature.description}</p> <div class="contact-feature-price">$${displayPrice}</div> ${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> `}).join(''); const contactCards = contactGrid.querySelectorAll('.contact-feature-card');console.log(`Found ${contactCards.length}contact feature cards`);contactCards.forEach(card => { const featureId = card.dataset.featureId; const isIncluded = card.classList.contains('included-in-package');console.log(`Adding click listener for contact feature:${featureId}`);card.addEventListener('click',(e) => {console.log(`Contact feature clicked:${featureId}`);e.preventDefault();e.stopPropagation(); if(isIncluded){this.showNotification('This feature is already included in your package!','info');return}this.toggleContactFeature(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.stopPropagation();console.log(`Contact feature child clicked:${featureId}`); if(isIncluded){this.showNotification('This feature is already included in your package!','info');return}this.toggleContactFeature(card)})})});lucide.createIcons()}renderAdditionalFeatures(){console.log('=== RENDERING ADDITIONAL FEATURES ===');console.log('Available additional features:',this.additionalFeatures);console.log('Selected additional features:',this.selectedAdditionalFeatures); const additionalFeaturesGrid = document.getElementById('additionalFeaturesGrid'); if(!additionalFeaturesGrid){console.log('Additional Features grid not found:additionalFeaturesGrid');return} if(!this.additionalFeatures || this.additionalFeatures.length === 0){additionalFeaturesGrid.innerHTML = '<p class="no-features">No additional features available</p>';return} const featuresHTML = this.additionalFeatures.map(feature => { const isSelected = this.selectedAdditionalFeatures.has(feature.id); const isIncluded = this.isComponentIncluded(feature.name); const displayPrice = isIncluded ? 0:feature.price;console.log('Feature timeline:',feature.name,feature.timeline,'Using fallback:',!feature.timeline); return ` <div class="feature-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-feature-id="${feature.id}"> <div class="feature-header"> <i data-lucide="${feature.icon || 'settings'}" aria-hidden="true"></i> <h4>${feature.name}</h4> </div> <p>${feature.description}</p> <div class="feature-timeline"> <i data-lucide="clock" aria-hidden="true"></i> <span>${feature.timeline || '5-7 days'}</span> </div> <div class="feature-footer"> <span class="feature-price">$${displayPrice}</span> ${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> </div> `}).join('');additionalFeaturesGrid.innerHTML = featuresHTML;additionalFeaturesGrid.querySelectorAll('.feature-card').forEach(card => {card.addEventListener('click',() => this.toggleAdditionalFeature(card))});lucide.createIcons()}renderFeatureCategory(gridId,features,categoryName){ const featureGrid = document.getElementById(gridId); if(!featureGrid){console.log(`${categoryName}grid not found:${gridId}`);return} if(!features || features.length === 0){console.log(`No ${categoryName.toLowerCase()}available`);featureGrid.innerHTML = `<div class="no-features"><i data-lucide="info"></i><p>No ${categoryName.toLowerCase()}available</p></div>`;return}featureGrid.innerHTML = features.map(feature => { const isSelected = this.selectedAdditionalFeatures.has(feature.id); const isIncluded = this.isComponentIncluded(feature.name); const displayPrice = isIncluded ? 0:feature.price;console.log(`${categoryName}feature ${feature.id}:isSelected = ${isSelected},isIncluded = ${isIncluded}`); return ` <div class="feature-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-feature-id="${feature.id}"> <div class="feature-header"> <h4>${feature.name}</h4> </div> <p>${feature.description}</p> <div class="feature-footer"> <span class="feature-price">$${displayPrice}</span> ${isIncluded ? '<div class="included-badge">Included</div>':isSelected ? '<div class="selected-badge">Selected</div>':''}</div> </div> `}).join('');featureGrid.querySelectorAll('.feature-card').forEach(card => { const featureId = card.dataset.featureId;card.addEventListener('click',(e) => {console.log(`${categoryName}feature clicked:${featureId}`);e.preventDefault();e.stopPropagation(); const feature = features.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleFeature(card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation();console.log(`${categoryName}feature child clicked:${featureId}`); const feature = features.find(f => f.id === featureId); if(feature && this.isComponentIncluded(feature.name)){this.showNotification('This feature is already included in your package!','info');return}this.toggleFeature(card)})})})}getCategoryDisplayName(category){ const categoryNames ={'core':'Core Features','content':'Content & Pages','marketing':'Marketing & SEO','social':'Social Media','advanced':'Advanced Features','other':'Additional Features'}; return categoryNames[category] || category}getCategoryIcon(category){ const categoryIcons ={'core':'settings','content':'file-text','marketing':'trending-up','social':'share-2','advanced':'zap','other':'plus'}; return categoryIcons[category] || 'plus'}isFeatureIncluded(feature,selectedPackageFeatures){ if(feature.includedIn && this.selectedPackage){ return feature.includedIn.includes(this.selectedPackage)} return selectedPackageFeatures.some(pkgFeature => pkgFeature.toLowerCase().includes(feature.name.toLowerCase()) || feature.name.toLowerCase().includes(pkgFeature.toLowerCase()) )}renderAddonServices(){ const addonServicesGrid = document.getElementById('addonServicesGrid'); if(!addonServicesGrid){console.log('Addon Services grid not found:addonServicesGrid');return}console.log('Rendering addon services. Available services:',this.addonServices);console.log('Selected addon services:',this.selectedAddonServices); if(!this.addonServices || this.addonServices.length === 0){console.log('No addon services data available');addonServicesGrid.innerHTML = '<p class="no-services">No addon services available</p>';return}addonServicesGrid.innerHTML = this.addonServices.map(service => { const isSelected = this.selectedAddonServices.has(service.id);console.log(`Addon service ${service.id}:isSelected = ${isSelected}`);console.log('Addon timeline:',service.name,service.timeline,'Using fallback:',!service.timeline); return ` <div class="addon-card ${isSelected ? 'selected':''}" data-service-id="${service.id}"> <div class="addon-header"> <i data-lucide="${service.icon || 'settings'}" aria-hidden="true"></i> <h4>${service.name}</h4> </div> <p>${service.description}</p> <div class="addon-timeline"> <i data-lucide="clock" aria-hidden="true"></i> <span>${service.timeline || '5-7 days'}</span> </div> <div class="addon-footer"> <span class="addon-price">$${service.price}</span> ${isSelected ? '<div class="selected-badge">Selected</div>':''}</div> </div> `}).join(''); const addonCards = addonServicesGrid.querySelectorAll('.addon-card');console.log(`Found ${addonCards.length}addon service cards`);addonCards.forEach(card => { const serviceId = card.dataset.serviceId;console.log(`Adding click listener for addon service:${serviceId}`);card.addEventListener('click',(e) => {console.log(`Addon service clicked:${serviceId}`);this.toggleAddonService(serviceId,card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.stopPropagation();console.log(`Addon service child clicked:${serviceId}`);this.toggleAddonService(serviceId,card)})})});lucide.createIcons()}renderComponents(){console.log('=== RENDERING COMPONENTS ===');console.log('Available components:',this.components);console.log('Selected components:',Array.from(this.selectedComponents));console.log('Pages components:',this.components?.pages);console.log('Features components:',this.components?.features);console.log('Technical components:',this.components?.technical);this.updateComponentTabCounts(); const pagesGrid = document.getElementById('pagesGrid'); if(pagesGrid){ if(!this.components.pages || this.components.pages.length === 0){console.log('No pages components available');pagesGrid.innerHTML = '<div class="no-components"><i data-lucide="file-text"></i><p>No pages components available</p></div>'} else{pagesGrid.innerHTML = this.components.pages.map(component => { const isSelected = this.selectedComponents.has(component.id); const isIncluded = this.isComponentIncluded(component.name); const displayPrice = isIncluded ? 0:component.price;console.log(`Component ${component.id}:isSelected = ${isSelected},isIncluded = ${isIncluded}`); return ` <div class="component-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-component-id="${component.id}"> <div class="component-header"> <div class="component-icon"> <i data-lucide="file-text" aria-hidden="true"></i> </div> <div class="component-info"> <h4>${component.name}</h4> <p>${component.description}</p> </div> </div> <div class="component-footer"> <span class="component-price">$${displayPrice}</span> ${isIncluded ? '<div class="included-badge"><i data-lucide="check"></i>Included</div>':isSelected ? '<div class="selected-badge"><i data-lucide="check"></i>Selected</div>':'<div class="not-selected-badge"><i data-lucide="plus"></i>Add Component</div>'}</div> </div> `}).join(''); const pageCards = pagesGrid.querySelectorAll('.component-card');console.log(`Found ${pageCards.length}page component cards`);pageCards.forEach(card => { const componentId = card.dataset.componentId;console.log(`Adding click listener for page component:${componentId}`);card.addEventListener('click',(e) => {console.log(`Page component clicked:${componentId}`);e.preventDefault();e.stopPropagation(); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation();console.log(`Page component child clicked:${componentId}`); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)})})})}} const featuresGrid = document.getElementById('featuresGrid'); if(featuresGrid){ if(!this.components.features || this.components.features.length === 0){console.log('No features components available');featuresGrid.innerHTML = '<div class="no-components"><i data-lucide="settings"></i><p>No features components available</p></div>'} else{featuresGrid.innerHTML = this.components.features.map(component => { const isSelected = this.selectedComponents.has(component.id); const isIncluded = this.isComponentIncluded(component.name); const displayPrice = isIncluded ? 0:component.price;console.log(`Component ${component.id}:isSelected = ${isSelected},isIncluded = ${isIncluded}`); return ` <div class="component-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-component-id="${component.id}"> <div class="component-header"> <div class="component-icon"> <i data-lucide="settings" aria-hidden="true"></i> </div> <div class="component-info"> <h4>${component.name}</h4> <p>${component.description}</p> </div> <div class="component-price">$${displayPrice}</div> </div> <div class="component-footer"> ${isIncluded ? '<div class="included-badge"><i data-lucide="check"></i>Included</div>':isSelected ? '<div class="selected-badge"><i data-lucide="check"></i>Selected</div>':'<div class="not-selected-badge"><i data-lucide="plus"></i>Add Component</div>'}</div> </div> `}).join(''); const featureCards = featuresGrid.querySelectorAll('.component-card');console.log(`Found ${featureCards.length}feature component cards`);featureCards.forEach(card => { const componentId = card.dataset.componentId;console.log(`Adding click listener for feature component:${componentId}`);card.addEventListener('click',(e) => {console.log(`Feature component clicked:${componentId}`);e.preventDefault();e.stopPropagation(); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation();console.log(`Feature component child clicked:${componentId}`); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)})})})}} const technicalGrid = document.getElementById('technicalGrid'); if(technicalGrid){ if(!this.components.technical || this.components.technical.length === 0){console.log('No technical components available');technicalGrid.innerHTML = '<div class="no-components"><i data-lucide="server"></i><p>No technical components available</p></div>'} else{technicalGrid.innerHTML = this.components.technical.map(component => { const isSelected = this.selectedComponents.has(component.id); const isIncluded = this.isComponentIncluded(component.name); const displayPrice = isIncluded ? 0:component.price;console.log(`Component ${component.id}:isSelected = ${isSelected},isIncluded = ${isIncluded}`); return ` <div class="component-card ${isSelected ? 'selected':''}${isIncluded ? 'included-in-package':''}" data-component-id="${component.id}"> <div class="component-header"> <div class="component-icon"> <i data-lucide="server" aria-hidden="true"></i> </div> <div class="component-info"> <h4>${component.name}</h4> <p>${component.description}</p> </div> <div class="component-price">$${displayPrice}</div> </div> <div class="component-footer"> ${isIncluded ? '<div class="included-badge"><i data-lucide="check"></i>Included</div>':isSelected ? '<div class="selected-badge"><i data-lucide="check"></i>Selected</div>':'<div class="not-selected-badge"><i data-lucide="plus"></i>Add Component</div>'}</div> </div> `}).join(''); const technicalCards = technicalGrid.querySelectorAll('.component-card');console.log(`Found ${technicalCards.length}technical component cards`);technicalCards.forEach(card => { const componentId = card.dataset.componentId;console.log(`Adding click listener for technical component:${componentId}`);card.addEventListener('click',(e) => {console.log(`Technical component clicked:${componentId}`);e.preventDefault();e.stopPropagation(); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)});card.querySelectorAll('*').forEach(child => {child.addEventListener('click',(e) => {e.preventDefault();e.stopPropagation();console.log(`Technical component child clicked:${componentId}`); const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){this.showNotification('This component is already included in your package!','info');return}this.toggleComponent(componentId,card)})})})}}lucide.createIcons()}updateComponentTabCounts(){ const pagesCount = this.components?.pages?.length || 0; const featuresCount = this.components?.features?.length || 0; const technicalCount = this.components?.technical?.length || 0; const pagesCountEl = document.getElementById('pages-count'); const featuresCountEl = document.getElementById('features-count'); const technicalCountEl = document.getElementById('technical-count'); if(pagesCountEl) pagesCountEl.textContent = pagesCount; if(featuresCountEl) featuresCountEl.textContent = featuresCount; if(technicalCountEl) technicalCountEl.textContent = technicalCount}selectPackage(packageId){this.selectedPackage = packageId; const standardEmergency = this.emergencyServices.find(s => s.id === 'standard-emergency'); if(standardEmergency && this.isComponentIncluded(standardEmergency.name)){this.selectedEmergency = 'standard-emergency';console.log('Auto-selected Standard Emergency Service')} const primaryZone = this.serviceAreas.find(s => s.id === 'primary-zone'); if(primaryZone && this.isComponentIncluded(primaryZone.name)){this.selectedServiceArea = 'primary-zone';console.log('Auto-selected Primary Service Zone')}this.saveToLocalStorage();this.virtualRenderer.queueRender(() => this.renderEmergencyServices(),'normal');this.virtualRenderer.queueRender(() => this.renderServiceAreas(),'normal');this.virtualRenderer.queueRender(() => this.renderFeatures(),'normal');this.virtualRenderer.queueRender(() => this.renderHvacFeatures(),'normal');this.virtualRenderer.queueRender(() => this.renderApplianceFeatures(),'normal');this.updateSummary();this.updateGenerateButton(); const packageName = this.packages.find(p => p.id === packageId)?.name || 'Package';this.showNotification(`${packageName}is ready! Add extra features to customize your website.`,'success')}selectEmergencyService(card){ const emergencyId = card.dataset.emergencyId;console.log(`selectEmergencyService called with:${emergencyId}`); if(this.selectedEmergency === emergencyId){this.selectedEmergency = null;console.log(`Deselected emergency service:${emergencyId}`)} else{this.selectedEmergency = emergencyId;console.log(`Selected emergency service:${emergencyId}`)}this.virtualRenderer.queueRender(() => this.renderEmergencyServices(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const service = this.emergencyServices.find(s => s.id === emergencyId); if(service){ const action = this.selectedEmergency === emergencyId ? 'added':'removed';this.showNotification(`${service.name}${action}to your quote`,'success')}}selectServiceArea(card){ const areaId = card.dataset.areaId; if(this.selectedServiceArea === areaId){this.selectedServiceArea = null;console.log(`Deselected service area:${areaId}`)} else{this.selectedServiceArea = areaId;console.log(`Selected service area:${areaId}`)}this.virtualRenderer.queueRender(() => this.renderServiceAreas(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const area = this.serviceAreas.find(a => a.id === areaId); if(area){ const action = this.selectedServiceArea === areaId ? 'added':'removed';this.showNotification(`${area.name}${action}to your quote`,'success')}}toggleFeature(featureId,card = null){ if(!card){card = document.querySelector(`[data-feature-id="${featureId}"]`)} if(!card) return; if(card.classList.contains('included-in-package')){return}console.log(`Toggle feature:${featureId},current state:`,this.selectedAdditionalFeatures.has(featureId)); if(this.selectedAdditionalFeatures.has(featureId)){this.selectedAdditionalFeatures.delete(featureId);console.log(`Deselected feature:${featureId}`)} else{this.selectedAdditionalFeatures.add(featureId);console.log(`Selected feature:${featureId}`)}this.updateFeatureVisualState(card,featureId);this.virtualRenderer.queueRender(() => this.renderFeatures(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const feature = this.findFeatureById(featureId); if(feature){ const action = this.selectedAdditionalFeatures.has(featureId) ? 'added':'removed';this.showNotification(`${feature.name}${action}to your quote`,'success')}}toggleHvacFeature(card){ const featureId = card.dataset.featureId; if(!featureId) return; const feature = this.hvacFeatures?.find(f => f.id === featureId); if(!feature) return;console.log(`Toggle HVAC feature:${featureId},current state:`,this.selectedHvacFeatures.has(featureId)); if(featureId === 'hvac-brand-support' || featureId === 'commercial-hvac-support'){ if(this.selectedHvacFeatures.has(featureId)){this.selectedHvacFeatures.delete(featureId);console.log(`Deselected HVAC feature:${featureId}`)} else{ if(featureId === 'hvac-brand-support'){this.selectedHvacFeatures.delete('commercial-hvac-support')} else{this.selectedHvacFeatures.delete('hvac-brand-support')}this.selectedHvacFeatures.add(featureId);console.log(`Selected HVAC feature:${featureId}`)}} else{ if(this.selectedHvacFeatures.has(featureId)){this.selectedHvacFeatures.delete(featureId);console.log(`Deselected HVAC feature:${featureId}`)} else{this.selectedHvacFeatures.add(featureId);console.log(`Selected HVAC feature:${featureId}`)}}this.updateHvacFeatureVisualState(card,featureId,feature);this.virtualRenderer.queueRender(() => this.renderHvacFeatures(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const action = this.selectedHvacFeatures.has(featureId) ? 'added':'removed';this.showNotification(`${feature.name}${action}to your quote`,'success')}updateHvacFeatureVisualState(card,featureId,feature){ const isSelected = this.selectedHvacFeatures.has(featureId); const isDefault = featureId === 'hvac-brand-support'; const isDefaultSelected = isDefault && isSelected; if(isSelected){card.classList.add('selected');card.classList.remove('not-selected')} else{card.classList.remove('selected');card.classList.add('not-selected')} const existingBadges = card.querySelectorAll('.included-badge,.selected-badge,.default-badge,.not-selected-badge');existingBadges.forEach(badge => badge.remove()); if(isDefaultSelected){card.insertAdjacentHTML('beforeend','<div class="included-badge">Included</div>')}else if(isSelected && !isDefault){card.insertAdjacentHTML('beforeend','<div class="selected-badge">Selected</div>')}else if(isDefault && !isSelected){card.insertAdjacentHTML('beforeend','<div class="default-badge">Default</div>')}else if(!isDefault && !isSelected){card.insertAdjacentHTML('beforeend','<div class="not-selected-badge">Not Selected</div>')}}toggleApplianceFeature(card){ const featureId = card.dataset.featureId; if(!featureId) return; const feature = this.applianceFeatures?.find(f => f.id === featureId); if(!feature) return;console.log(`Toggle Appliance feature:${featureId},current state:`,this.selectedApplianceFeatures.has(featureId)); if(featureId === 'appliance-brand-support' || featureId === 'commercial-appliance-support'){ if(this.selectedApplianceFeatures.has(featureId)){this.selectedApplianceFeatures.delete(featureId);console.log(`Deselected Appliance feature:${featureId}`)} else{ if(featureId === 'appliance-brand-support'){this.selectedApplianceFeatures.delete('commercial-appliance-support')} else{this.selectedApplianceFeatures.delete('appliance-brand-support')}this.selectedApplianceFeatures.add(featureId);console.log(`Selected Appliance feature:${featureId}`)}} else{ if(this.selectedApplianceFeatures.has(featureId)){this.selectedApplianceFeatures.delete(featureId);console.log(`Deselected Appliance feature:${featureId}`)} else{this.selectedApplianceFeatures.add(featureId);console.log(`Selected Appliance feature:${featureId}`)}}this.updateApplianceFeatureVisualState(card,featureId,feature);this.virtualRenderer.queueRender(() => this.renderApplianceFeatures(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const action = this.selectedApplianceFeatures.has(featureId) ? 'added':'removed';this.showNotification(`${feature.name}${action}to your quote`,'success')}updateApplianceFeatureVisualState(card,featureId,feature){ const isSelected = this.selectedApplianceFeatures.has(featureId); const isDefault = featureId === 'appliance-brand-support'; const isDefaultSelected = isDefault && isSelected; if(isSelected){card.classList.add('selected');card.classList.remove('not-selected')} else{card.classList.remove('selected');card.classList.add('not-selected')} const existingBadges = card.querySelectorAll('.included-badge,.selected-badge,.default-badge,.not-selected-badge');existingBadges.forEach(badge => badge.remove()); if(isDefaultSelected){card.insertAdjacentHTML('beforeend','<div class="included-badge">Included</div>')}else if(isSelected && !isDefault){card.insertAdjacentHTML('beforeend','<div class="selected-badge">Selected</div>')}else if(isDefault && !isSelected){card.insertAdjacentHTML('beforeend','<div class="default-badge">Default</div>')}else if(!isDefault && !isSelected){card.insertAdjacentHTML('beforeend','<div class="not-selected-badge">Not Selected</div>')}}toggleContactFeature(card){console.log(`toggleContactFeature called with card:`,card); const featureId = card.dataset.featureId; if(!featureId){console.log('No featureId found in card dataset');return}console.log('Current selectedContactFeatures before toggle:',Array.from(this.selectedContactFeatures)); if(this.selectedContactFeatures.has(featureId)){this.selectedContactFeatures.delete(featureId);card.classList.remove('selected');console.log(`Removed contact feature ${featureId}from selection`)} else{this.selectedContactFeatures.add(featureId);card.classList.add('selected');console.log(`Added contact feature ${featureId}to selection`)}console.log('Current selectedContactFeatures after toggle:',Array.from(this.selectedContactFeatures));this.virtualRenderer.queueRender(() => this.renderContactFeatures(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton()}toggleAddon(addonId,card = null){console.log(`toggleAddon called with addonId:${addonId}`); if(!card){card = document.querySelector(`[data-addon-id="${addonId}"]`)} if(!card){console.log('Card not found for addonId:',addonId);return}console.log('Current selectedAddons before toggle:',Array.from(this.selectedAddons)); if(this.selectedAddons.has(addonId)){this.selectedAddons.delete(addonId);card.classList.remove('selected');console.log(`Removed addon ${addonId}from selection`)} else{this.selectedAddons.add(addonId);card.classList.add('selected');console.log(`Added addon ${addonId}to selection`)}console.log('Current selectedAddons after toggle:',Array.from(this.selectedAddons));this.virtualRenderer.queueRender(() => this.renderAddons(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton()}toggleComponent(componentId,card = null){console.log(`toggleComponent called with componentId:${componentId}`); if(!card){card = document.querySelector(`[data-component-id="${componentId}"]`)} if(!card){console.log('Card not found for componentId:',componentId);return} const component = this.findComponentById(componentId); if(component && this.isComponentIncluded(component.name)){console.log(`Component ${componentId}is included in package,cannot toggle`);this.showNotification('This component is already included in your package!','info');return}console.log('Current selectedComponents before toggle:',Array.from(this.selectedComponents)); if(this.selectedComponents.has(componentId)){this.selectedComponents.delete(componentId);console.log(`Removed component ${componentId}from selection`)} else{this.selectedComponents.add(componentId);console.log(`Added component ${componentId}to selection`)}console.log('Current selectedComponents after toggle:',Array.from(this.selectedComponents)); if(this.selectedComponents.has(componentId)){card.classList.add('selected');card.classList.remove('not-selected')} else{card.classList.remove('selected');card.classList.add('not-selected')} const badge = card.querySelector('.selected-badge,.not-selected-badge'); if(badge){ if(this.selectedComponents.has(componentId)){badge.textContent = 'Selected';badge.className = 'selected-badge'} else{badge.textContent = 'Not Selected';badge.className = 'not-selected-badge'}}this.virtualRenderer.queueRender(() => this.renderComponents(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); if(component){ const action = this.selectedComponents.has(componentId) ? 'added':'removed';this.showNotification(`${component.name}${action}to your quote`,'success')}}findFeatureById(featureId){ if(this.features && typeof this.features === 'object'){ for( const categoryFeatures of Object.values(this.features)){ const feature = categoryFeatures.find(f => f.id === featureId); if(feature){ return feature}}} return null}updateFeatureVisualState(card,featureId){ const isSelected = this.selectedAdditionalFeatures.has(featureId); const isIncluded = card.classList.contains('included-in-package'); if(isSelected){card.classList.add('selected');card.classList.remove('not-selected')} else{card.classList.remove('selected');card.classList.add('not-selected')} const existingBadges = card.querySelectorAll('.included-badge,.selected-badge,.not-selected-badge');existingBadges.forEach(badge => badge.remove()); if(isIncluded){card.insertAdjacentHTML('beforeend','<div class="included-badge">Included</div>')}else if(isSelected){card.insertAdjacentHTML('beforeend','<div class="selected-badge">Selected</div>')} else{card.insertAdjacentHTML('beforeend','<div class="not-selected-badge">Not Selected</div>')}}findComponentById(componentId){ for( const category of Object.values(this.components)){ const component = category.find(c => c.id === componentId); if(component){ return component}} return null}isComponentIncluded(componentName){ if(!this.selectedPackage) return false; const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(!selectedPackage) return false; const includedFeatures = selectedPackage.includedFeatures || selectedPackage.includedComponents || [];console.log(`Checking if "${componentName}" is included in package. Included features:`,includedFeatures); const isIncluded = includedFeatures.includes(componentName);console.log(`Result:${isIncluded}`); return isIncluded}getPackageIncludedFeatures(){ if(!this.selectedPackage) return []; const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(!selectedPackage) return []; const featureMap ={'Responsive Homepage':'responsive-homepage','About Us Page':'about-page','Services Page':'services-page','Contact Form':'contact-form','Mobile Optimization':'mobile-optimization','Basic SEO Setup':'basic-seo','Blog System':'blog-system','Testimonials':'testimonials','Service Areas':'service-areas','Advanced SEO':'advanced-seo','Analytics Integration':'analytics','Social Media Integration':'social-media','Custom Design':'custom-design','Advanced Animations':'advanced-animations','Priority Support':'priority-support','Performance Optimization':'performance-optimization','Security Features':'security-features','Backup System':'backup-system'}; return selectedPackage.features.map(featureName => featureMap[featureName]).filter(Boolean)}calculateTotalPrice(){ let totalPrice = 0; if(this.selectedPackage){totalPrice = 1200}else if(this.packages && this.packages.length > 0){totalPrice = 1200}this.selectedAdditionalFeatures.forEach(featureId => { const feature = this.additionalFeatures.find(f => f.id === featureId); if(feature){totalPrice += feature.price}});this.selectedAddonServices.forEach(serviceId => { const service = this.addonServices.find(s => s.id === serviceId); if(service){totalPrice += service.price}}); return totalPrice}updateSummary(){ let totalPrice = 0; let totalFeatures = 0; if(this.selectedPackage && this.packages && Array.isArray(this.packages)){totalPrice = 1200; const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(selectedPackage){ const includedFeatures = selectedPackage.includedFeatures || [];totalFeatures += includedFeatures.length}}else if(this.packages && Array.isArray(this.packages) && this.packages.length > 0){totalPrice = 1200; const defaultPackage = this.packages[0]; if(defaultPackage && defaultPackage.includedFeatures){totalFeatures += defaultPackage.includedFeatures.length}} else{totalPrice = 1200;totalFeatures = 12} if(this.selectedAdditionalFeatures && this.additionalFeatures && Array.isArray(this.additionalFeatures)){this.selectedAdditionalFeatures.forEach(featureId => { const feature = this.additionalFeatures.find(f => f.id === featureId); if(feature){totalPrice += feature.price;totalFeatures++}})} if(this.selectedAddonServices && this.addonServices && Array.isArray(this.addonServices)){this.selectedAddonServices.forEach(serviceId => { const service = this.addonServices.find(s => s.id === serviceId); if(service){totalPrice += service.price}})}this.totalPrice = totalPrice;this.saveToLocalStorage(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){summaryTotalElement.textContent = `$${totalPrice.toLocaleString()}`} const fixedSummaryTotalElement = document.getElementById('fixedSummaryTotal'); if(fixedSummaryTotalElement){fixedSummaryTotalElement.textContent = `$${totalPrice.toLocaleString()}`} const totalFeaturesElement = document.getElementById('totalFeatures'); if(totalFeaturesElement){totalFeaturesElement.textContent = totalFeatures} const includedFeaturesElement = document.getElementById('includedFeatures'); if(includedFeaturesElement){ if(this.packages && Array.isArray(this.packages) && this.selectedPackage){ const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(selectedPackage && selectedPackage.includedFeatures){includedFeaturesElement.textContent = selectedPackage.includedFeatures.length} else{includedFeaturesElement.textContent = '12'}} else{includedFeaturesElement.textContent = '12'}} const selectedFeaturesElement = document.getElementById('selectedFeatures'); if(selectedFeaturesElement){selectedFeaturesElement.textContent = this.selectedAdditionalFeatures.size} const selectedAddonsElement = document.getElementById('selectedAddons'); if(selectedAddonsElement){selectedAddonsElement.textContent = this.selectedAddonServices.size}this.updateTimelineEstimate();this.updateSelectedItems();setTimeout(() => this.saveToLocalStorage(),50)}updateTimelineEstimate(){ const timelineElement = document.getElementById('timelineEstimate'); if(!timelineElement) return; let baseMinDays = 15; let baseMaxDays = 20; if(this.selectedPackage && this.packages && Array.isArray(this.packages)){ const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(selectedPackage){baseMinDays = 15;baseMaxDays = 20}} let totalMinDays = baseMinDays; let totalMaxDays = baseMaxDays; if(this.selectedAdditionalFeatures && this.additionalFeatures && Array.isArray(this.additionalFeatures)){this.selectedAdditionalFeatures.forEach(featureId => { const feature = this.additionalFeatures.find(f => f.id === featureId); if(feature && feature.timeline){ const timelineMatch = feature.timeline.match(/(\d+)-(\d+)/); if(timelineMatch){ const minDays = parseInt(timelineMatch[1]); const maxDays = parseInt(timelineMatch[2]);totalMinDays += minDays;totalMaxDays += maxDays}}})} if(this.selectedAddonServices && this.addonServices && Array.isArray(this.addonServices)){this.selectedAddonServices.forEach(serviceId => { const service = this.addonServices.find(s => s.id === serviceId); if(service && service.timeline){ const timelineMatch = service.timeline.match(/(\d+)-(\d+)/); if(timelineMatch){ const minDays = parseInt(timelineMatch[1]); const maxDays = parseInt(timelineMatch[2]);totalMinDays += minDays;totalMaxDays += maxDays}}})} const bufferMin = Math.ceil(totalMinDays * 0.2); const bufferMax = Math.ceil(totalMaxDays * 0.2); const finalMinDays = totalMinDays + bufferMin; const finalMaxDays = totalMaxDays + bufferMax;timelineElement.textContent = `${finalMinDays}-${finalMaxDays}days`; const fixedTimelineElement = document.getElementById('fixedTimelineEstimate'); if(fixedTimelineElement){fixedTimelineElement.textContent = `${finalMinDays}-${finalMaxDays}days`}}updateSelectedItems(){ const selectedItemsContainer = document.getElementById('selectedItems'); if(!selectedItemsContainer) return; const items = []; if(this.selectedPackage && this.packages && Array.isArray(this.packages)){ const selectedPackage = this.packages.find(p => p.id === this.selectedPackage); if(selectedPackage){items.push({name:selectedPackage.name,price:selectedPackage.price,timeline:'18-24 days',type:'package',id:selectedPackage.id})}} if(this.selectedAdditionalFeatures && this.additionalFeatures && Array.isArray(this.additionalFeatures)){this.selectedAdditionalFeatures.forEach(featureId => { const feature = this.additionalFeatures.find(f => f.id === featureId); if(feature){items.push({name:feature.name,price:feature.price,timeline:feature.timeline || '5-7 days',type:'feature',id:feature.id})}})} if(this.selectedAddonServices && this.addonServices && Array.isArray(this.addonServices)){this.selectedAddonServices.forEach(serviceId => { const service = this.addonServices.find(s => s.id === serviceId); if(service){items.push({name:service.name,price:service.price,timeline:service.timeline || '5-7 days',type:'addon',id:service.id})}})}this.currentSelectedItems = items;selectedItemsContainer.innerHTML = items.map((item,index) => ` <div class="selected-item" data-item-index="${index}"> <div class="selected-item-info"> <span class="item-name">${item.name}</span> <span class="item-timeline">${item.timeline}</span> </div> <div class="selected-item-actions"> <span class="item-price">$${item.price}</span> ${item.type !== 'package' ? ` <button class="delete-item-btn" onclick="quoteSystem.removeSelectedItem(${index})" aria-label="Remove ${item.name}"> <i data-lucide="x" aria-hidden="true"></i> </button> `:''}</div> </div> `).join('');lucide.createIcons();this.updateFixedSelectedItems(items)}updateFixedSelectedItems(items){ const fixedSelectedItemsContainer = document.getElementById('fixedSelectedItems'); if(!fixedSelectedItemsContainer) return;fixedSelectedItemsContainer.innerHTML = items.map((item,index) => ` <div class="selected-item" data-item-index="${index}"> <div class="item-name">${item.name}</div> <div class="item-price">$${item.price}</div> ${item.type !== 'package' ? ` <button class="remove-item" onclick="quoteSystem.removeSelectedItem(${index})" aria-label="Remove ${item.name}"> <i data-lucide="x" aria-hidden="true"></i> </button> `:''}</div> `).join('');lucide.createIcons()}removeSelectedItem(index){ if(!this.currentSelectedItems || !this.currentSelectedItems[index]) return; const item = this.currentSelectedItems[index]; if(item.type === 'package'){console.log('Cannot remove base package - it is required');return}switch (item.type){case 'feature':this.selectedAdditionalFeatures.delete(item.id);this.deselectFeature(item.id);break;case 'addon':this.selectedAddonServices.delete(item.id);this.deselectAddon(item.id);break}this.updateSummary();this.updateSelectedItems();this.updateGenerateButton();this.saveToLocalStorage();console.log(`Removed ${item.type}:${item.name}`)}deselectFeature(featureId){ const featureCard = document.querySelector(`[data-feature-id="${featureId}"]`); if(featureCard){featureCard.classList.remove('selected'); const selectBtn = featureCard.querySelector('.select-feature-btn'); if(selectBtn){selectBtn.classList.remove('selected');selectBtn.textContent = 'Select'} const selectedBadge = featureCard.querySelector('.selected-badge'); if(selectedBadge){selectedBadge.remove()} const notSelectedBadge = featureCard.querySelector('.not-selected-badge'); if(notSelectedBadge){notSelectedBadge.remove()} const defaultBadge = featureCard.querySelector('.default-badge'); if(!defaultBadge){ const badgeContainer = featureCard.querySelector('.badge-container'); if(badgeContainer){ const newDefaultBadge = document.createElement('div');newDefaultBadge.className = 'default-badge';newDefaultBadge.textContent = 'Not Selected';badgeContainer.appendChild(newDefaultBadge)}}}}deselectAddon(addonId){ const addonCard = document.querySelector(`[data-service-id="${addonId}"]`); if(addonCard){addonCard.classList.remove('selected'); const selectedBadge = addonCard.querySelector('.selected-badge'); if(selectedBadge){selectedBadge.remove()}console.log(`Deselected addon:${addonId}`)} else{console.log(`Addon card not found for ID:${addonId}`)}}updateGenerateButton(){ const generateBtn = document.getElementById('generateQuoteBtn'); if(generateBtn){ const hasSelection = this.selectedPackage || this.selectedAdditionalFeatures.size > 0 || this.selectedAddonServices.size > 0; const shouldEnable = hasSelection; if(shouldEnable){generateBtn.disabled = false;generateBtn.classList.remove('disabled');generateBtn.classList.add('enabled');generateBtn.title = 'Generate your quote'} else{generateBtn.disabled = true;generateBtn.classList.add('disabled');generateBtn.classList.remove('enabled');generateBtn.title = 'Please select at least one package or additional feature to continue'}console.log('Generate button update:',{selectedPackage:this.selectedPackage,additionalFeatures:this.selectedAdditionalFeatures.size,addonServices:this.selectedAddonServices.size,hasSelection:hasSelection,shouldEnable:shouldEnable,buttonDisabled:generateBtn.disabled})}}validatePersonalInfo(){ let isValid = true; const emailField = document.getElementById('customerEmail'); if(!emailField || !emailField.value.trim()){isValid = false} else{ const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; if(!emailRegex.test(emailField.value.trim())){isValid = false}} const nameField = document.getElementById('customerName'); if(!nameField || !nameField.value.trim()){isValid = false}else if(nameField.value.trim().length < 2){isValid = false} const phoneField = document.getElementById('customerPhone'); if(!phoneField || !phoneField.value.trim()){isValid = false}else if(!isValidPhone(phoneField.value.trim())){isValid = false} const locationField = document.getElementById('customerLocation'); if(!locationField || !locationField.value.trim()){isValid = false}else if(locationField.value.trim().length < 2){isValid = false} return isValid}validateAndShowErrors(){ let isValid = true; const errors = []; const modal = document.getElementById('customerInfoModal'); const isModalMode = modal && !modal.hasAttribute('hidden') && modal.classList.contains('show');console.log('Modal element:',modal);console.log('Modal has hidden:',modal ? modal.hasAttribute('hidden'):'no modal');console.log('Modal has show class:',modal ? modal.classList.contains('show'):'no modal');console.log('Is modal mode:',isModalMode); const fieldPrefix = isModalMode ? 'modal':'';console.log('Field prefix:',fieldPrefix);this.clearAllFieldErrors(fieldPrefix); const nameField = document.getElementById(fieldPrefix + 'CustomerName');console.log('Name field ID:',fieldPrefix + 'CustomerName');console.log('Name field found:',!!nameField);console.log('Name field value:',nameField ? nameField.value:'no field');console.log('Name field trimmed:',nameField ? nameField.value.trim():'no field'); if(!nameField || !nameField.value.trim()){isValid = false; const errorMsg = 'Full name is required';this.showFieldError(fieldPrefix + 'customerName',errorMsg);errors.push('Full name is required');this.validationErrors = errors; return isValid}else if(nameField.value.trim().length < 2){isValid = false; const errorMsg = 'Please enter your full name (at least 2 characters)';this.showFieldError(fieldPrefix + 'customerName',errorMsg);errors.push('Please enter your full name (at least 2 characters)');this.validationErrors = errors; return isValid} else{this.showFieldValid(fieldPrefix + 'customerName')} const emailField = document.getElementById(fieldPrefix + 'CustomerEmail'); if(!emailField || !emailField.value.trim()){isValid = false; const errorMsg = 'Email address is required';this.showFieldError(fieldPrefix + 'customerEmail',errorMsg);errors.push('Email address is required');this.validationErrors = errors; return isValid} else{ const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; if(!emailRegex.test(emailField.value.trim())){isValid = false; const errorMsg = 'Please enter a valid email address (e.g.,john@example.com)';this.showFieldError(fieldPrefix + 'customerEmail',errorMsg);errors.push('Please enter a valid email address');this.validationErrors = errors; return isValid} else{this.showFieldValid(fieldPrefix + 'customerEmail')}} const phoneField = document.getElementById(fieldPrefix + 'CustomerPhone'); if(!phoneField || !phoneField.value.trim()){isValid = false; const errorMsg = 'Phone number is required';this.showFieldError(fieldPrefix + 'customerPhone',errorMsg);errors.push('Phone number is required');this.validationErrors = errors; return isValid}else if(!isValidPhone(phoneField.value.trim())){isValid = false; const errorMsg = 'Please enter a valid phone number (e.g.,5551234567)';this.showFieldError(fieldPrefix + 'customerPhone',errorMsg);errors.push('Please enter a valid phone number');this.validationErrors = errors; return isValid} else{this.showFieldValid(fieldPrefix + 'customerPhone')} const locationField = document.getElementById(fieldPrefix + 'CustomerLocation'); if(!locationField || !locationField.value.trim()){isValid = false; const errorMsg = 'Service location is required';this.showFieldError(fieldPrefix + 'customerLocation',errorMsg);errors.push('Service location is required');this.validationErrors = errors; return isValid}else if(locationField.value.trim().length < 2){isValid = false; const errorMsg = 'Please enter your service location (e.g.,New York,NY)';this.showFieldError(fieldPrefix + 'customerLocation',errorMsg);errors.push('Please enter your service location');this.validationErrors = errors; return isValid} else{this.showFieldValid(fieldPrefix + 'customerLocation')}this.validationErrors = []; return isValid}showFieldError(fieldId,message){ const field = document.getElementById(fieldId); const errorElement = document.getElementById(`${fieldId}-error`); if(field && errorElement){field.classList.add('error');field.classList.remove('valid');errorElement.textContent = message;errorElement.hidden = false}}clearFieldError(fieldId){ const field = document.getElementById(fieldId); const errorElement = document.getElementById(`${fieldId}-error`); if(field && errorElement){field.classList.remove('error');errorElement.hidden = true}}clearAllFieldErrors(fieldPrefix){ const fields = ['CustomerName','CustomerEmail','CustomerPhone','CustomerLocation'];fields.forEach(fieldName => {this.clearFieldError(fieldPrefix + fieldName)})}showFieldValid(fieldId){ const field = document.getElementById(fieldId); const errorElement = document.getElementById(`${fieldId}-error`); if(field && errorElement){field.classList.remove('error');field.classList.add('valid');errorElement.hidden = true}}scrollToTop(){ if(window.scrollY === 0 || !window.userHasScrolled){window.scrollTo(0,0);setTimeout(() => { if(!window.userHasScrolled){window.scrollTo({top:0,left:0,behavior:'smooth'})}},100);setTimeout(() => { if(!window.userHasScrolled){window.scrollTo(0,0)}},500)}}} function clearAllSelections(){document.querySelectorAll('.package-card').forEach(card => {card.classList.remove('selected')});document.querySelectorAll('.feature-card').forEach(card => {card.classList.remove('selected')});document.querySelectorAll('.addon-card').forEach(card => {card.classList.remove('selected')}); const formFields = [ 'customerName','customerEmail','customerPhone','customerCompany','customerLocation','customerMessage' ];formFields.forEach(fieldId => { const field = document.getElementById(fieldId); if(field){field.value = ''}}); const serviceAreaSelect = document.getElementById('customerServiceArea'); if(serviceAreaSelect){serviceAreaSelect.value = '15'} if(window.quoteSystem){window.quoteSystem.selectedAdditionalFeatures.clear();window.quoteSystem.selectedAddonServices.clear();window.quoteSystem.currentStep = 1;window.quoteSystem.clearLocalStorage();window.quoteSystem.virtualRenderer.queueRender(() => window.quoteSystem.renderAdditionalFeatures(),'normal');window.quoteSystem.virtualRenderer.queueRender(() => window.quoteSystem.renderAddonServices(),'normal');window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton();window.quoteSystem.showNotification('All selections have been cleared','info')}} function generateQuote(){console.log('Generate quote function called'); if(!window.quoteSystem){alert('Quote system not available');return}showCustomerInfoModal()} function showCustomerInfoModal(){console.log('showCustomerInfoModal function called'); const modal = document.getElementById('customerInfoModal');console.log('Modal element found:',modal); if(modal){console.log('Showing modal...');modal.removeAttribute('hidden');modal.classList.add('show');document.body.style.overflow = 'hidden'; const firstInput = modal.querySelector('input'); if(firstInput){firstInput.focus()}initializeModalCountrySelector();console.log('Modal should now be visible')} else{console.error('Modal element not found!')}} function closeCustomerInfoModal(){ const modal = document.getElementById('customerInfoModal'); if(modal){modal.classList.remove('show');document.body.style.overflow = 'auto'}} function submitCustomerInfo(){console.log('Submit customer info function called'); if(!window.quoteSystem){alert('Quote system not available');return} const submitBtn = document.getElementById('submitCustomerInfoBtn'); const formLoader = document.getElementById('formLoader'); const originalText = submitBtn ? submitBtn.innerHTML:''; if(submitBtn){submitBtn.disabled = true;submitBtn.classList.add('loading');submitBtn.innerHTML = '<i data-lucide="loader-2" class="animate-spin"></i> Validating...'; if(window.lucide){lucide.createIcons()}} const customerInfo ={name:document.getElementById('modalCustomerName')?.value?.trim() || '',email:document.getElementById('modalCustomerEmail')?.value?.trim() || '',company:document.getElementById('modalCustomerCompany')?.value?.trim() || '',location:document.getElementById('modalCustomerLocation')?.value?.trim() || '',serviceArea:document.getElementById('modalCustomerServiceArea')?.value || '15',message:document.getElementById('modalCustomerMessage')?.value?.trim() || ''}; const countryCode = document.getElementById('modalCountryCode')?.value || '+1'; const phoneNumber = document.getElementById('modalCustomerPhone')?.value?.trim() || ''; const fullPhoneNumber = phoneNumber ? `${countryCode}${phoneNumber}`:'';customerInfo.phone = fullPhoneNumber;console.log('Customer info collected:',customerInfo); const validationErrors = [];console.log('Starting form validation...');console.log('Customer info:',customerInfo); if(!window.quoteSystem.validateAndShowErrors()){console.log('Form validation failed - showing errors'); if(formLoader){formLoader.classList.remove('show');setTimeout(() => {formLoader.setAttribute('hidden','')},300)} if(submitBtn){submitBtn.disabled = false;submitBtn.classList.remove('loading');submitBtn.innerHTML = originalText; if(window.lucide){lucide.createIcons()}} const errorMessage = window.quoteSystem.validationErrors && window.quoteSystem.validationErrors.length > 0 ? window.quoteSystem.validationErrors[0]:'Please fix the validation errors in the form';window.quoteSystem.showNotification(errorMessage,'error');return}console.log('Validation passed,proceeding with quote generation...');closeCustomerInfoModal(); if(formLoader){formLoader.removeAttribute('hidden');setTimeout(() => {formLoader.classList.add('show')},100)} if(submitBtn){submitBtn.innerHTML = '<i data-lucide="loader-2" class="animate-spin"></i> Processing...'; if(window.lucide){lucide.createIcons()}} const quoteData ={selectedPackage:window.quoteSystem.selectedPackage,selectedAdditionalFeatures:Array.from(window.quoteSystem.selectedAdditionalFeatures),selectedAddonServices:Array.from(window.quoteSystem.selectedAddonServices),totalPrice:window.quoteSystem.totalPrice,customerInfo:customerInfo,generatedAt: new Date().toLocaleString()};localStorage.setItem('quoteData',JSON.stringify(quoteData));setTimeout(() => { if(formLoader){formLoader.classList.remove('show')}window.location.href = '/success.html'},1500)} function initializeModalCountrySelector(){ const trigger = document.getElementById('modalCountrySelectTrigger'); const dropdown = document.getElementById('modalCountrySelectDropdown'); const searchInput = document.getElementById('modalCountrySearch'); const countryList = document.getElementById('modalCountryList'); const hiddenSelect = document.getElementById('modalCountryCode'); if(!trigger || !dropdown || !searchInput || !countryList || !hiddenSelect){console.warn('Modal country selector elements not found');return} const countries = window.quoteSystem ? window.quoteSystem.countries || []:[]; function renderCountries(filteredCountries = countries){countryList.innerHTML = filteredCountries.map(country => ` <div class="country-item" data-code="${country.code}"> <img src="https:<span class="country-code">${country.code}</span> </div> `).join('')}renderCountries();trigger.addEventListener('click',() => { const isHidden = dropdown.hidden;dropdown.hidden = !isHidden; if(!isHidden){searchInput.focus()}});searchInput.addEventListener('input',(e) => { const searchTerm = e.target.value.toLowerCase(); const filteredCountries = countries.filter(country => country.name.toLowerCase().includes(searchTerm) || country.code.toLowerCase().includes(searchTerm) || country.flag.toLowerCase().includes(searchTerm) );renderCountries(filteredCountries)});countryList.addEventListener('click',(e) => { const countryItem = e.target.closest('.country-item'); if(countryItem){ const code = countryItem.dataset.code; const country = countries.find(c => c.code === code); if(country){document.getElementById('modalSelectedFlag').src = `https:document.getElementById('modalSelectedCountryCode').textContent = country.code;hiddenSelect.value = country.code;dropdown.hidden = true}}});document.addEventListener('click',(e) => { if(!trigger.contains(e.target) && !dropdown.contains(e.target)){dropdown.hidden = true}})} function displayThankYouPopup(quoteData){console.log('Display thank you popup with data:',quoteData); const selectedPackage = window.quoteSystem.packages.find(p => p.id === quoteData.selectedPackage); const selectedFeatures = quoteData.selectedAdditionalFeatures.map(featureId => { return window.quoteSystem.additionalFeatures.find(f => f.id === featureId)}).filter(Boolean); const selectedAddons = quoteData.selectedAddonServices.map(addonId => { return window.quoteSystem.addonServices.find(a => a.id === addonId)}).filter(Boolean); const popupContent = ` <div class="thank-you-popup"> <div class="thank-you-header"> <div class="thank-you-icon"> <i data-lucide="check-circle"></i> </div> <h2>Thank You!</h2> <p>Your quote has been generated successfully</p> </div> <div class="quote-details"> <div class="quote-summary"> <h3>Quote Summary</h3> <div class="summary-item"> <span>Package:</span> <span>${selectedPackage ? selectedPackage.name:'Basic Package'}</span> </div> <div class="summary-item"> <span>Base Price:</span> <span>$${1200}</span> </div> ${selectedFeatures.length > 0 ? ` <div class="summary-item"> <span>Additional Features:</span> <span>${selectedFeatures.length}selected</span> </div> `:''}${selectedAddons.length > 0 ? ` <div class="summary-item"> <span>Add-on Services:</span> <span>${selectedAddons.length}selected</span> </div> `:''}<div class="summary-item total"> <span>Total Price:</span> <span>$${quoteData.totalPrice.toLocaleString()}</span> </div> </div> <div class="selected-items"> ${selectedFeatures.length > 0 ? ` <div class="items-section"> <h4>Selected Features:</h4> <ul> ${selectedFeatures.map(feature => ` <li>${feature.name}- $${feature.price}</li> `).join('')}</ul> </div> `:''}${selectedAddons.length > 0 ? ` <div class="items-section"> <h4>Selected Add-ons:</h4> <ul> ${selectedAddons.map(addon => ` <li>${addon.name}- $${addon.price}</li> `).join('')}</ul> </div> `:''}</div> </div> <div class="action-buttons"> <button class="btn btn-secondary" onclick="downloadQuote()"> <i data-lucide="download"></i> Download Quote </button> <button class="btn btn-primary" onclick="proceedToPayment()"> <i data-lucide="credit-card"></i> Proceed to Payment </button> <button class="btn btn-outline" onclick="closeThankYouPopup()"> <i data-lucide="x"></i> Close </button> </div> </div> `;showThankYouPopup(popupContent)} function showThankYouPopup(content){ const existingPopup = document.querySelector('.thank-you-overlay'); if(existingPopup){existingPopup.remove()} const overlay = document.createElement('div');overlay.className = 'thank-you-overlay';overlay.innerHTML = ` <div class="thank-you-modal"> ${content}</div> `;document.body.appendChild(overlay);setTimeout(() => {overlay.classList.add('show')},10);lucide.createIcons();document.body.style.overflow = 'hidden'} function closeThankYouPopup(){ const overlay = document.querySelector('.thank-you-overlay'); if(overlay){overlay.classList.remove('show');setTimeout(() => {overlay.remove();document.body.style.overflow = 'auto'},300)}} function proceedToPayment(){alert('Payment processing would be implemented here. Redirecting to payment gateway...')} function scrollToTop(){ if(window.scrollY === 0 || !window.userHasScrolled){window.scrollTo(0,0);setTimeout(() => { if(!window.userHasScrolled){window.scrollTo({top:0,left:0,behavior:'smooth'})}},100);setTimeout(() => { if(!window.userHasScrolled){window.scrollTo(0,0)}},500)}} function downloadQuote(){console.log('Download quote function called'); const quoteData ={selectedPackage:window.quoteSystem.selectedPackage,selectedAdditionalFeatures:Array.from(window.quoteSystem.selectedAdditionalFeatures),selectedAddonServices:Array.from(window.quoteSystem.selectedAddonServices),totalPrice:window.quoteSystem.totalPrice,customerInfo:{name:document.getElementById('customerName').value.trim(),email:document.getElementById('customerEmail').value.trim(),phone:document.getElementById('customerPhone').value.trim(),company:document.getElementById('customerCompany').value.trim(),location:document.getElementById('customerLocation').value.trim(),serviceArea:document.getElementById('customerServiceArea').value || '15',message:document.getElementById('customerMessage').value.trim()},generatedAt: new Date().toLocaleString()};generatePDF(quoteData)} function generatePDF(quoteData){ if(typeof window.jsPDF === 'undefined'){alert('PDF generation library not loaded. Please refresh the page and try again.');return}const{jsPDF}= window.jsPDF; const doc = new jsPDF();doc.setProperties({title:'HVAC Website Development Quote',subject:'Professional Quote for Website Development',author:'Anass El - Full-Stack Web Developer',creator:'HVAC Quote System'});addHeader(doc);addCustomerInfo(doc,quoteData.customerInfo);addQuoteSummary(doc,quoteData);addSelectedItems(doc,quoteData);addTermsAndConditions(doc);addFooter(doc); const customerName = quoteData.customerInfo.name || 'Customer'; const date = new Date().toISOString().split('T')[0]; const filename = `HVAC_Website_Quote_${customerName.replace(/\s+/g,'_')}_${date}.pdf`;doc.save(filename);window.quoteSystem.showNotification('Quote downloaded successfully!','success')} function addHeader(doc){doc.setFontSize(24);doc.setFont('helvetica','bold');doc.setTextColor(59,130,246);doc.text('Professional HVAC & Appliance Repair',20,30);doc.text('Website Development Quote',20,40);doc.setFontSize(12);doc.setFont('helvetica','normal');doc.setTextColor(107,114,128);doc.text('Custom website development for your service business',20,50);doc.setFontSize(14);doc.setFont('helvetica','bold');doc.setTextColor(34,197,94);doc.text('Anass El - Full-Stack Web Developer',20,70);doc.setFontSize(10);doc.setFont('helvetica','normal');doc.setTextColor(107,114,128);doc.text(`Generated:${ new Date().toLocaleDateString('en-US',{year:'numeric',month:'long',day:'numeric',hour:'2-digit',minute:'2-digit'})}`,20,80);doc.setDrawColor(59,130,246);doc.setLineWidth(0.5);doc.line(20,85,190,85)} function addCustomerInfo(doc,customerInfo){doc.addPage();doc.setFontSize(16);doc.setFont('helvetica','bold');doc.setTextColor(17,24,39);doc.text('Customer Information',20,30);doc.setFontSize(11);doc.setFont('helvetica','normal');doc.setTextColor(55,65,81); let yPosition = 50; const lineHeight = 8; if(customerInfo.name){doc.text(`Name:${customerInfo.name}`,20,yPosition);yPosition += lineHeight} if(customerInfo.email){doc.text(`Email:${customerInfo.email}`,20,yPosition);yPosition += lineHeight} if(customerInfo.phone){doc.text(`Phone:${customerInfo.phone}`,20,yPosition);yPosition += lineHeight} if(customerInfo.company){doc.text(`Company:${customerInfo.company}`,20,yPosition);yPosition += lineHeight} if(customerInfo.location){doc.text(`Location:${customerInfo.location}`,20,yPosition);yPosition += lineHeight} if(customerInfo.serviceArea){doc.text(`Service Area:${customerInfo.serviceArea}miles`,20,yPosition);yPosition += lineHeight} if(customerInfo.message){yPosition += lineHeight;doc.text('Additional Requirements:',20,yPosition);yPosition += lineHeight; const words = customerInfo.message.split(' '); let line = ''; for( let word of words){ const testLine = line + word + ' '; if(doc.getTextWidth(testLine) < 170){line = testLine} else{doc.text(line,20,yPosition);yPosition += lineHeight;line = word + ' '}} if(line){doc.text(line,20,yPosition)}}} function addQuoteSummary(doc,quoteData){doc.setFontSize(16);doc.setFont('helvetica','bold');doc.setTextColor(17,24,39);doc.text('Quote Summary',20,30); const selectedPackage = window.quoteSystem.packages.find(p => p.id === quoteData.selectedPackage); const selectedFeatures = quoteData.selectedAdditionalFeatures.map(featureId => { return window.quoteSystem.additionalFeatures.find(f => f.id === featureId)}).filter(Boolean); const selectedAddons = quoteData.selectedAddonServices.map(addonId => { return window.quoteSystem.addonServices.find(a => a.id === addonId)}).filter(Boolean);doc.setFontSize(11);doc.setFont('helvetica','normal');doc.setTextColor(55,65,81); let yPosition = 50; const lineHeight = 8;doc.text('Base Package:',20,yPosition);doc.text(selectedPackage ? selectedPackage.name:'Basic Package',80,yPosition);doc.text('$1,200',160,yPosition);yPosition += lineHeight; if(selectedFeatures.length > 0){yPosition += lineHeight;doc.setFont('helvetica','bold');doc.text('Additional Features:',20,yPosition);yPosition += lineHeight;doc.setFont('helvetica','normal'); let featuresTotal = 0; for( let feature of selectedFeatures){doc.text(`• ${feature.name}`,30,yPosition);doc.text(`$${feature.price}`,160,yPosition);yPosition += lineHeight;featuresTotal += feature.price}doc.setFont('helvetica','bold');doc.text('Features Subtotal:',20,yPosition);doc.text(`$${featuresTotal}`,160,yPosition);yPosition += lineHeight} if(selectedAddons.length > 0){yPosition += lineHeight;doc.setFont('helvetica','bold');doc.text('Add-on Services:',20,yPosition);yPosition += lineHeight;doc.setFont('helvetica','normal'); let addonsTotal = 0; for( let addon of selectedAddons){doc.text(`• ${addon.name}`,30,yPosition);doc.text(`$${addon.price}`,160,yPosition);yPosition += lineHeight;addonsTotal += addon.price}doc.setFont('helvetica','bold');doc.text('Add-ons Subtotal:',20,yPosition);doc.text(`$${addonsTotal}`,160,yPosition);yPosition += lineHeight}yPosition += lineHeight;doc.setFontSize(14);doc.setFont('helvetica','bold');doc.setTextColor(59,130,246);doc.text('TOTAL:',20,yPosition);doc.text(`$${quoteData.totalPrice.toLocaleString()}`,160,yPosition);doc.setDrawColor(59,130,246);doc.setLineWidth(0.5);doc.line(20,yPosition + 5,190,yPosition + 5)} function addSelectedItems(doc,quoteData){doc.addPage();doc.setFontSize(16);doc.setFont('helvetica','bold');doc.setTextColor(17,24,39);doc.text('Selected Services & Features',20,30); let yPosition = 50; const lineHeight = 8; const selectedPackage = window.quoteSystem.packages.find(p => p.id === quoteData.selectedPackage); if(selectedPackage){doc.setFontSize(12);doc.setFont('helvetica','bold');doc.setTextColor(34,197,94);doc.text('Base Package:',20,yPosition);yPosition += lineHeight;doc.setFontSize(10);doc.setFont('helvetica','normal');doc.setTextColor(55,65,81);doc.text(selectedPackage.name,30,yPosition);yPosition += lineHeight; const words = selectedPackage.description.split(' '); let line = ''; for( let word of words){ const testLine = line + word + ' '; if(doc.getTextWidth(testLine) < 150){line = testLine} else{doc.text(line,30,yPosition);yPosition += lineHeight;line = word + ' '}} if(line){doc.text(line,30,yPosition);yPosition += lineHeight}} const selectedFeatures = quoteData.selectedAdditionalFeatures.map(featureId => { return window.quoteSystem.additionalFeatures.find(f => f.id === featureId)}).filter(Boolean); if(selectedFeatures.length > 0){yPosition += lineHeight;doc.setFontSize(12);doc.setFont('helvetica','bold');doc.setTextColor(59,130,246);doc.text('Additional Features:',20,yPosition);yPosition += lineHeight; for( let feature of selectedFeatures){doc.setFontSize(10);doc.setFont('helvetica','bold');doc.setTextColor(55,65,81);doc.text(`• ${feature.name}- $${feature.price}`,30,yPosition);yPosition += lineHeight;doc.setFont('helvetica','normal'); const words = feature.description.split(' '); let line = ''; for( let word of words){ const testLine = line + word + ' '; if(doc.getTextWidth(testLine) < 150){line = testLine} else{doc.text(line,40,yPosition);yPosition += lineHeight;line = word + ' '}} if(line){doc.text(line,40,yPosition);yPosition += lineHeight}yPosition += lineHeight}} const selectedAddons = quoteData.selectedAddonServices.map(addonId => { return window.quoteSystem.addonServices.find(a => a.id === addonId)}).filter(Boolean); if(selectedAddons.length > 0){yPosition += lineHeight;doc.setFontSize(12);doc.setFont('helvetica','bold');doc.setTextColor(245,158,11);doc.text('Add-on Services:',20,yPosition);yPosition += lineHeight; for( let addon of selectedAddons){doc.setFontSize(10);doc.setFont('helvetica','bold');doc.setTextColor(55,65,81);doc.text(`• ${addon.name}- $${addon.price}`,30,yPosition);yPosition += lineHeight;doc.setFont('helvetica','normal'); const words = addon.description.split(' '); let line = ''; for( let word of words){ const testLine = line + word + ' '; if(doc.getTextWidth(testLine) < 150){line = testLine} else{doc.text(line,40,yPosition);yPosition += lineHeight;line = word + ' '}} if(line){doc.text(line,40,yPosition);yPosition += lineHeight}yPosition += lineHeight}}} function addTermsAndConditions(doc){doc.addPage();doc.setFontSize(16);doc.setFont('helvetica','bold');doc.setTextColor(17,24,39);doc.text('Terms & Conditions',20,30);doc.setFontSize(10);doc.setFont('helvetica','normal');doc.setTextColor(55,65,81); const terms = [ '1. This quote is valid for 30 days from the date of generation.','2. Payment terms:50% upfront,50% upon project completion.','3. Project timeline:15-20 business days for basic package.','4. Additional features may extend the timeline.','5. Revisions:2 rounds of revisions included.','6. Hosting and domain costs are not included unless specified.','7. SEO optimization includes basic on-page optimization.','8. Mobile responsiveness covers all modern devices.','9. Content creation is not included unless specified.','10. Maintenance and updates are not included in this quote.' ]; let yPosition = 50; const lineHeight = 6; for( let term of terms){doc.text(term,20,yPosition);yPosition += lineHeight}} function addFooter(doc){ const pageCount = doc.internal.getNumberOfPages(); for( let i = 1;i <= pageCount;i++){doc.setPage(i);doc.setDrawColor(200,200,200);doc.setLineWidth(0.1);doc.line(20,280,190,280);doc.setFontSize(8);doc.setFont('helvetica','normal');doc.setTextColor(107,114,128);doc.text('Anass El - Full-Stack Web Developer | Professional HVAC Website Development',20,285);doc.text(`Page ${i}of ${pageCount}`,170,285)}} function generateQuoteContent(quoteData){ const selectedPackage = window.quoteSystem.packages.find(p => p.id === quoteData.selectedPackage); let timeline = '18-24 days'; if(selectedPackage){timeline = selectedPackage.timeline} const additionalFeatures = quoteData.selectedAdditionalFeatures.length; if(additionalFeatures > 0){ const additionalDays = Math.ceil(additionalFeatures / 2); const baseDays = parseInt(timeline.match(/(\d+)/)[1]); const totalDays = baseDays + additionalDays;timeline = `${totalDays}-${totalDays + 2}days`} const selectedFeatures = quoteData.selectedAdditionalFeatures.map(featureId => { return window.quoteSystem.additionalFeatures.find(f => f.id === featureId)}).filter(Boolean); const selectedAddons = quoteData.selectedAddonServices.map(addonId => { return window.quoteSystem.addonServices.find(a => a.id === addonId)}).filter(Boolean); return ` <div class="quote-content"> <!-- Quote Header --> <div class="quote-header"> <div class="quote-header-main"> <div class="quote-logo"> <i data-lucide="building-2"></i> </div> <div class="quote-title-section"> <h2>Professional HVAC & Appliance Repair Website</h2> <p class="quote-subtitle">Custom website development for your service business</p> <div class="quote-badges"> <span class="badge badge-primary">Professional Design</span> <span class="badge badge-success">Mobile Responsive</span> <span class="badge badge-info">SEO Optimized</span> </div> </div> </div> <div class="quote-header-meta"> <div class="quote-meta-grid"> <div class="meta-item"> <i data-lucide="calendar"></i> <div> <strong>Generated:</strong><br> ${ new Date().toLocaleDateString('en-US',{year:'numeric',month:'long',day:'numeric',hour:'2-digit',minute:'2-digit'})}</div> </div> <div class="meta-item"> <i data-lucide="clock"></i> <div> <strong>Valid Until:</strong><br> ${ new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString('en-US',{year:'numeric',month:'long',day:'numeric'})}</div> </div> <div class="meta-item"> <i data-lucide="hash"></i> <div> <strong>Quote #:</strong><br> Q-${Date.now().toString().slice(-6)}</div> </div> </div> </div> </div> <!-- Quote Summary Cards --> <div class="quote-summary-section"> <div class="quote-summary-grid"> <div class="summary-card primary"> <div class="summary-icon"> <i data-lucide="dollar-sign"></i> </div> <div class="summary-content"> <h3>Total Investment</h3> <p class="summary-value">$${quoteData.totalPrice.toLocaleString()}</p> <p class="summary-note">Flexible payment options available</p> </div> </div> <div class="summary-card"> <div class="summary-icon"> <i data-lucide="clock"></i> </div> <div class="summary-content"> <h3>Development Timeline</h3> <p class="summary-value">${timeline}</p> <p class="summary-note">From project start</p> </div> </div> <div class="summary-card"> <div class="summary-icon"> <i data-lucide="package"></i> </div> <div class="summary-content"> <h3>Package</h3> <p class="summary-value">${selectedPackage ? selectedPackage.name:'Custom Solution'}</p> <p class="summary-note">Base package included</p> </div> </div> <div class="summary-card"> <div class="summary-icon"> <i data-lucide="plus-circle"></i> </div> <div class="summary-content"> <h3>Additional Features</h3> <p class="summary-value">${selectedFeatures.length}</p> <p class="summary-note">Enhancements selected</p> </div> </div> </div> </div> <!-- Package Details --> <div class="quote-details-section"> <h3><i data-lucide="list"></i> Package Details</h3> <div class="package-details"> <div class="package-info"> <h4>${selectedPackage ? selectedPackage.name:'Professional Website Package'}</h4> <p class="package-description">${selectedPackage ? selectedPackage.description:'Complete professional website solution for HVAC and appliance repair businesses.'}</p> <div class="package-features"> <h5>Included Features:</h5> <ul class="feature-list"> ${selectedPackage && selectedPackage.includedFeatures ? selectedPackage.includedFeatures.map(feature => `<li><i data-lucide="check"></i> ${feature}</li>` ).join(''):` <li><i data-lucide="check"></i> Professional Homepage Design</li> <li><i data-lucide="check"></i> Mobile-Responsive Layout</li> <li><i data-lucide="check"></i> Contact Forms & Phone Integration</li> <li><i data-lucide="check"></i> Service Pages (HVAC & Appliance)</li> <li><i data-lucide="check"></i> About Us Page</li> <li><i data-lucide="check"></i> Emergency Service Call Buttons</li> <li><i data-lucide="check"></i> Service Area Coverage</li> <li><i data-lucide="check"></i> Basic SEO Optimization</li> <li><i data-lucide="check"></i> Google Analytics Integration</li> <li><i data-lucide="check"></i> Customer Testimonials Section</li> <li><i data-lucide="check"></i> Business Hours & Location</li> <li><i data-lucide="check"></i> Brand Support Information</li> `}</ul> </div> </div> </div> </div> <!-- Additional Features --> ${selectedFeatures.length > 0 ? ` <div class="quote-details-section"> <h3><i data-lucide="plus-circle"></i> Additional Features</h3> <div class="features-grid"> ${selectedFeatures.map(feature => ` <div class="feature-item"> <div class="feature-icon"> <i data-lucide="${feature.icon || 'star'}"></i> </div> <div class="feature-content"> <h4>${feature.name}</h4> <p>${feature.description}</p> <span class="feature-price">$${feature.price.toLocaleString()}</span> </div> </div> `).join('')}</div> </div> `:''}<!-- Add-On Services --> ${selectedAddons.length > 0 ? ` <div class="quote-details-section"> <h3><i data-lucide="settings"></i> Add-On Services</h3> <div class="addons-grid"> ${selectedAddons.map(addon => ` <div class="addon-item"> <div class="addon-icon"> <i data-lucide="${addon.icon || 'tool'}"></i> </div> <div class="addon-content"> <h4>${addon.name}</h4> <p>${addon.description}</p> <span class="addon-price">$${addon.price.toLocaleString()}</span> </div> </div> `).join('')}</div> </div> `:''}<!-- Pricing Breakdown --> <div class="quote-details-section"> <h3><i data-lucide="calculator"></i> Pricing Breakdown</h3> <div class="pricing-breakdown"> <div class="breakdown-item"> <span class="item-label">Base Package</span> <span class="item-price">$${selectedPackage ? selectedPackage.price.toLocaleString():'1,200'}</span> </div> ${selectedFeatures.map(feature => ` <div class="breakdown-item"> <span class="item-label">${feature.name}</span> <span class="item-price">$${feature.price.toLocaleString()}</span> </div> `).join('')}${selectedAddons.map(addon => ` <div class="breakdown-item"> <span class="item-label">${addon.name}</span> <span class="item-price">$${addon.price.toLocaleString()}</span> </div> `).join('')}<div class="breakdown-total"> <span class="total-label">Total Investment</span> <span class="total-value">$${quoteData.totalPrice.toLocaleString()}</span> </div> </div> </div> <!-- Customer Information --> <div class="customer-info-section"> <h3><i data-lucide="user"></i> Customer Information</h3> <div class="customer-info-grid"> <div class="info-item"> <i data-lucide="user"></i> <div> <strong>Name:</strong><br> ${quoteData.customerInfo.name}</div> </div> <div class="info-item"> <i data-lucide="mail"></i> <div> <strong>Email:</strong><br> ${quoteData.customerInfo.email}</div> </div> ${quoteData.customerInfo.phone ? ` <div class="info-item"> <i data-lucide="phone"></i> <div> <strong>Phone:</strong><br> ${quoteData.customerInfo.phone}</div> </div> `:''}${quoteData.customerInfo.company ? ` <div class="info-item"> <i data-lucide="building"></i> <div> <strong>Company:</strong><br> ${quoteData.customerInfo.company}</div> </div> `:''}<div class="info-item"> <i data-lucide="map-pin"></i> <div> <strong>Service Location:</strong><br> ${quoteData.customerInfo.location}</div> </div> <div class="info-item"> <i data-lucide="navigation"></i> <div> <strong>Service Area:</strong><br> ${quoteData.customerInfo.serviceArea}miles radius </div> </div> </div> ${quoteData.customerInfo.message ? ` <div class="additional-requirements"> <h4><i data-lucide="message-square"></i> Additional Requirements</h4> <p>${quoteData.customerInfo.message}</p> </div> `:''}</div> <!-- Payment Options --> <div class="payment-options-section"> <h3><i data-lucide="credit-card"></i> Payment Options</h3> <div class="payment-options-grid"> <div class="payment-option recommended"> <div class="payment-header"> <div class="payment-icon"> <i data-lucide="shield-check"></i> </div> <div class="payment-badge">Recommended</div> </div> <div class="payment-content"> <h4>50% Upfront Payment</h4> <div class="payment-breakdown"> <div class="payment-item"> <span>Upfront Payment:</span> <span class="payment-amount">$${Math.round(quoteData.totalPrice * 0.5).toLocaleString()}</span> </div> <div class="payment-item"> <span>Upon Completion:</span> <span class="payment-amount">$${Math.round(quoteData.totalPrice * 0.5).toLocaleString()}</span> </div> </div> <ul class="payment-benefits"> <li><i data-lucide="check"></i> Secure project start</li> <li><i data-lucide="check"></i> Flexible payment terms</li> <li><i data-lucide="check"></i> No hidden fees</li> </ul> </div> </div> <div class="payment-option"> <div class="payment-header"> <div class="payment-icon"> <i data-lucide="dollar-sign"></i> </div> </div> <div class="payment-content"> <h4>Full Payment</h4> <div class="payment-breakdown"> <div class="payment-item"> <span>Total Amount:</span> <span class="payment-amount">$${quoteData.totalPrice.toLocaleString()}</span> </div> </div> <ul class="payment-benefits"> <li><i data-lucide="check"></i> One-time payment</li> <li><i data-lucide="check"></i> 5% discount applied</li> <li><i data-lucide="check"></i> Priority support</li> </ul> </div> </div> </div> </div> <!-- Project Timeline --> <div class="timeline-section"> <h3><i data-lucide="calendar"></i> Project Timeline</h3> <div class="timeline-steps"> <div class="timeline-step"> <div class="step-icon"> <i data-lucide="play"></i> </div> <div class="step-content"> <h4>Project Start</h4> <p>Immediate start upon payment confirmation</p> </div> </div> <div class="timeline-step"> <div class="step-icon"> <i data-lucide="layout"></i> </div> <div class="step-content"> <h4>Design Phase</h4> <p>Custom design and layout creation</p> </div> </div> <div class="timeline-step"> <div class="step-icon"> <i data-lucide="code"></i> </div> <div class="step-content"> <h4>Development</h4> <p>Website development and feature implementation</p> </div> </div> <div class="timeline-step"> <div class="step-icon"> <i data-lucide="check-circle"></i> </div> <div class="step-content"> <h4>Launch & Support</h4> <p>Website launch and ongoing support</p> </div> </div> </div> </div> <!-- What's Included --> <div class="included-section"> <h3><i data-lucide="gift"></i> What's Included</h3> <div class="included-grid"> <div class="included-item"> <i data-lucide="wifi"></i> <h4>Hosting Setup</h4> <p>Professional hosting configuration</p> </div> <div class="included-item"> <i data-lucide="shield"></i> <h4>SSL Certificate</h4> <p>Secure HTTPS connection</p> </div> <div class="included-item"> <i data-lucide="smartphone"></i> <h4>Mobile Optimization</h4> <p>Perfect on all devices</p> </div> <div class="included-item"> <i data-lucide="search"></i> <h4>SEO Setup</h4> <p>Search engine optimization</p> </div> <div class="included-item"> <i data-lucide="headphones"></i> <h4>30 Days Support</h4> <p>Post-launch assistance</p> </div> <div class="included-item"> <i data-lucide="download"></i> <h4>Training</h4> <p>Website management training</p> </div> </div> </div> <!-- What's Included & Next Steps --> <div class="quote-footer"> <div class="footer-content"> <div class="footer-section"> <h4><i data-lucide="check-circle"></i> What's Included</h4> <ul> <li>Professional website design and development</li> <li>Mobile-responsive design for all devices</li> <li>SEO optimization for local search visibility</li> <li>Content management system (CMS)</li> <li>30 days of support and maintenance</li> <li>Training and documentation</li> <li>Google Analytics integration</li> <li>Social media integration</li> </ul> </div> <div class="footer-section"> <h4><i data-lucide="arrow-right"></i> Next Steps</h4> <ol> <li>Review and approve this quote</li> <li>Sign the service agreement</li> <li>Provide content and branding materials</li> <li>Development begins within 24 hours</li> <li>Regular progress updates throughout</li> <li>Final review and launch</li> </ol> </div> </div> <div class="footer-note"> <div class="note-content"> <i data-lucide="info"></i> <div> <strong>Important:</strong> This quote is valid for 30 days from the date of generation. For questions,modifications,or to proceed with this quote,please contact us. </div> </div> </div> </div> </div> `} if(performance.navigation.type === 1 && 'scrollRestoration' in history){history.scrollRestoration = 'manual'}window.userHasScrolled = false; let scrollTimeout;window.addEventListener('scroll',function(){window.userHasScrolled = true;clearTimeout(scrollTimeout);scrollTimeout = setTimeout(() => {window.userHasScrolled = false},2000)});document.addEventListener('DOMContentLoaded',function(){console.log('DOMContentLoaded event fired');console.log('Initializing QuoteSystem...');window.quoteSystem = new QuoteSystem();setTimeout(() => { if(window.quoteSystem){window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = window.quoteSystem.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}console.log('Forced summary update after DOMContentLoaded')}},100);window.addEventListener('load',function(){setTimeout(() => { if(window.quoteSystem){window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = window.quoteSystem.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}console.log('Forced summary update after window load')}},200)});document.addEventListener('visibilitychange',function(){ if(!document.hidden && window.quoteSystem){setTimeout(() => {window.quoteSystem.loadFromLocalStorage();window.quoteSystem.restoreUIState();window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = window.quoteSystem.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}console.log('Forced summary update after page visibility change')},100)}});window.addEventListener('focus',function(){ if(window.quoteSystem){setTimeout(() => {window.quoteSystem.loadFromLocalStorage();window.quoteSystem.restoreUIState();window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = window.quoteSystem.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}console.log('Forced summary update after window focus')},100)}});window.addEventListener('pageshow',function(event){ if(window.quoteSystem){setTimeout(() => {window.quoteSystem.loadFromLocalStorage();window.quoteSystem.restoreUIState();window.quoteSystem.updateSummary();window.quoteSystem.updateGenerateButton(); const summaryTotalElement = document.getElementById('summaryTotal'); if(summaryTotalElement){ const currentPrice = window.quoteSystem.calculateTotalPrice();summaryTotalElement.textContent = `$${currentPrice.toLocaleString()}`}console.log('Forced summary update after pageshow event')},100)}}); if(performance.navigation.type === 1){scrollToTop();window.addEventListener('load',function(){scrollToTop()});setTimeout(() => scrollToTop(),1000)} const tabBtns = document.querySelectorAll('.tab-btn');tabBtns.forEach(btn => {btn.addEventListener('click',function(){ const tabName = this.dataset.tab;tabBtns.forEach(b => b.classList.remove('active'));this.classList.add('active');document.querySelectorAll('.tab-content').forEach(content => {content.classList.remove('active')}); const selectedContent = document.getElementById(`${tabName}-tab`); if(selectedContent){selectedContent.classList.add('active')}})}); const mobileMenuToggle = document.getElementById('mobileMenuToggle'); const navList = document.querySelector('.nav-list'); if(mobileMenuToggle && navList){mobileMenuToggle.addEventListener('click',function(){navList.classList.toggle('active');this.classList.toggle('active')})} const getStartedBtn = document.querySelector('.hero-btn-primary'); if(getStartedBtn){getStartedBtn.addEventListener('click',function(){ const heroSection = document.querySelector('.hero-section'); if(heroSection){ const heroBottom = heroSection.offsetTop + heroSection.offsetHeight;window.scrollTo({top:heroBottom,behavior:'smooth'});setTimeout(() => { if(window.quoteSystem){window.quoteSystem.updateSummary();console.log('Quote summary updated after Get Started click')}},500)}})} const learnMoreBtn = document.querySelector('.hero-btn-secondary'); if(learnMoreBtn){learnMoreBtn.addEventListener('click',function(){window.location.href = 'about-us.html'})}}); function isValidEmail(email){ const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; return emailRegex.test(email)} function isValidPhone(phone){ const cleaned = phone.replace(/[^\d+]/g,''); const phoneRegex = /^[\+]?[1-9][\d]{6,14}$/; return phoneRegex.test(cleaned)}QuoteSystem.prototype.toggleAdditionalFeature = function(card){ const featureId = card.dataset.featureId; if(!featureId) return;console.log(`Toggle additional feature:${featureId},current state:`,this.selectedAdditionalFeatures.has(featureId)); if(this.selectedAdditionalFeatures.has(featureId)){this.selectedAdditionalFeatures.delete(featureId);card.classList.remove('selected');console.log(`Deselected additional feature:${featureId}`)} else{this.selectedAdditionalFeatures.add(featureId);card.classList.add('selected');console.log(`Selected additional feature:${featureId}`)}this.updateAdditionalFeatureVisualState(card,featureId);this.virtualRenderer.queueRender(() => this.renderAdditionalFeatures(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const feature = this.additionalFeatures.find(f => f.id === featureId); if(feature){ const action = this.selectedAdditionalFeatures.has(featureId) ? 'added':'removed';this.showNotification(`${feature.name}${action}to your quote`,'success')}};QuoteSystem.prototype.updateAdditionalFeatureVisualState = function(card,featureId){ const isSelected = this.selectedAdditionalFeatures.has(featureId); const isIncluded = card.classList.contains('included-in-package'); if(isSelected){card.classList.add('selected');card.classList.remove('not-selected')} else{card.classList.remove('selected');card.classList.add('not-selected')} const existingBadges = card.querySelectorAll('.included-badge,.selected-badge,.not-selected-badge');existingBadges.forEach(badge => badge.remove()); if(isIncluded){card.insertAdjacentHTML('beforeend','<div class="included-badge">Included</div>')}else if(isSelected){card.insertAdjacentHTML('beforeend','<div class="selected-badge">Selected</div>')} else{card.insertAdjacentHTML('beforeend','<div class="not-selected-badge">Not Selected</div>')}};QuoteSystem.prototype.toggleAddonService = function(serviceId,card = null){console.log(`toggleAddonService called with serviceId:${serviceId}`); if(!card){card = document.querySelector(`[data-service-id="${serviceId}"]`)} if(!card){console.log('Card not found for serviceId:',serviceId);return}console.log('Current selectedAddonServices before toggle:',Array.from(this.selectedAddonServices)); if(this.selectedAddonServices.has(serviceId)){this.selectedAddonServices.delete(serviceId);card.classList.remove('selected');console.log(`Removed addon service ${serviceId}from selection`)} else{this.selectedAddonServices.add(serviceId);card.classList.add('selected');console.log(`Added addon service ${serviceId}to selection`)}console.log('Current selectedAddonServices after toggle:',Array.from(this.selectedAddonServices));this.virtualRenderer.queueRender(() => this.renderAddonServices(),'normal');this.saveToLocalStorage();this.updateSummary();this.updateGenerateButton(); const service = this.addonServices.find(s => s.id === serviceId); if(service){ const action = this.selectedAddonServices.has(serviceId) ? 'added':'removed';this.showNotification(`${service.name}${action}to your quote`,'success')}};document.addEventListener('DOMContentLoaded',function(){ const scrollBtn = document.getElementById('scrollToQuoteSummary'); const quoteSidebar = document.querySelector('.quote-sidebar'); if(!scrollBtn || !quoteSidebar) return; function toggleScrollButton(){ const scrollPosition = window.pageYOffset; const quoteSidebarTop = quoteSidebar.offsetTop; const windowHeight = window.innerHeight; if(scrollPosition > quoteSidebarTop - windowHeight + 100){scrollBtn.classList.add('show')} else{scrollBtn.classList.remove('show')}} function scrollToQuoteSummary(){ const quoteSidebar = document.querySelector('.quote-sidebar'); const fixedQuoteSummary = document.getElementById('fixedQuoteSummary'); const isMobile = window.innerWidth <= 768; if(isMobile && fixedQuoteSummary){fixedQuoteSummary.classList.add('show'); const fixedSummaryContent = document.getElementById('fixedSummaryContent'); const fixedSummaryToggle = document.getElementById('fixedSummaryToggle'); if(fixedSummaryContent && fixedSummaryToggle){fixedSummaryContent.style.maxHeight = '180px';fixedSummaryToggle.setAttribute('aria-expanded','true')} const targetPosition = document.body.scrollHeight - window.innerHeight;window.scrollTo({top:targetPosition,behavior:'smooth'});fixedQuoteSummary.style.transition = 'box-shadow 0.3s ease';fixedQuoteSummary.style.boxShadow = '0 0 30px rgba(59,130,246,0.3)';setTimeout(() => {fixedQuoteSummary.style.boxShadow = ''},2000);console.log('Mobile scroll:Showing fixed quote summary');return} if(!quoteSidebar) return; const targetPosition = quoteSidebar.offsetTop - 20;console.log('Desktop scroll:Scrolling to quote sidebar top'); const finalTargetPosition = Math.max(0,Math.min(targetPosition,document.body.scrollHeight - window.innerHeight));console.log('Final target position:',finalTargetPosition);window.scrollTo({top:finalTargetPosition,behavior:'smooth'});quoteSidebar.style.transition = 'box-shadow 0.3s ease';quoteSidebar.style.boxShadow = '0 0 30px rgba(59,130,246,0.3)';setTimeout(() => {quoteSidebar.style.boxShadow = ''},2000)}window.addEventListener('scroll',toggleScrollButton);scrollBtn.addEventListener('click',scrollToQuoteSummary);toggleScrollButton();document.addEventListener('keydown',function(e){ if((e.ctrlKey || e.metaKey) && e.key === 'ArrowUp'){e.preventDefault();scrollToQuoteSummary()}}); let touchStartY = 0; let touchEndY = 0;document.addEventListener('touchstart',function(e){touchStartY = e.touches[0].clientY});document.addEventListener('touchend',function(e){touchEndY = e.changedTouches[0].clientY; const touchDiff = touchStartY - touchEndY; if(touchDiff > 50 && scrollBtn.classList.contains('show')){scrollToQuoteSummary()}})});document.addEventListener('DOMContentLoaded',function(){ const fixedQuoteSummary = document.getElementById('fixedQuoteSummary'); const fixedSummaryToggle = document.getElementById('fixedSummaryToggle'); const fixedSummaryContent = document.getElementById('fixedSummaryContent'); if(!fixedQuoteSummary || !fixedSummaryToggle || !fixedSummaryContent) return; function toggleFixedSummary(){ const isExpanded = fixedSummaryToggle.getAttribute('aria-expanded') === 'true'; if(isExpanded){fixedSummaryContent.style.maxHeight = '0';fixedSummaryToggle.setAttribute('aria-expanded','false');fixedQuoteSummary.classList.remove('show')} else{fixedSummaryContent.style.maxHeight = '180px';fixedSummaryToggle.setAttribute('aria-expanded','true');fixedQuoteSummary.classList.add('show')}}fixedSummaryToggle.addEventListener('click',toggleFixedSummary); function showFixedSummaryIfMobile(){ if(window.innerWidth <= 768){fixedQuoteSummary.classList.add('show');fixedSummaryContent.style.maxHeight = '180px';fixedSummaryToggle.setAttribute('aria-expanded','true')}} function hideFixedSummaryIfMobile(){ if(window.innerWidth <= 768){fixedQuoteSummary.classList.remove('show');fixedSummaryContent.style.maxHeight = '0';fixedSummaryToggle.setAttribute('aria-expanded','false')}}window.showFixedSummaryIfMobile = showFixedSummaryIfMobile;window.hideFixedSummaryIfMobile = hideFixedSummaryIfMobile;setTimeout(() => { const selectedItems = document.querySelectorAll('.selected-item'); if(selectedItems.length > 0 && window.innerWidth <= 768){showFixedSummaryIfMobile()}},1000)});